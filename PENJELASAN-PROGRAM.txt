# Story App - Platform Berbagi Cerita dengan Lokasi

Story App adalah aplikasi web untuk berbagi cerita dengan fitur lokasi geografis. Dibangun dengan Next.js, React, dan TypeScript, aplikasi ini memungkinkan pengguna untuk membuat, melihat, dan menghapus cerita yang dilengkapi dengan gambar dan lokasi.


## Fitur Utama

- 🚀 **Autentikasi Pengguna**: Login dan register dengan validasi
- 📖 **Buat Cerita**: 
  - Judul, deskripsi, dan gambar (upload file atau capture kamera)
  - Pemilih lokasi di peta interaktif
- 🗺️ **Visualisasi Peta**: Tampilkan semua cerita di peta Leaflet.js
- 🎨 **UI Modern**: 
  - Animasi dan transisi halus
  - Desain responsif
  - Tema dinamis
- ⚡ **Optimasi Performa**:
  - Lazy loading komponen
  - Manajemen state dengan React Context
  - Auto-save draft cerita

### Teknologi Stack

**Frontend**:
- Next.js 15 (App Router)
- React 19
- TypeScript
- Tailwind CSS + shadcn/ui
- Leaflet.js (peta)
- react-hook-form + Zod (form validation)
- react-hot-toast (notifikasi)

**Backend API**:

'https://backend-dstory-production.up.railway.app'

#### Struktur Projek

.
├── public/                         # File statis (favicon, icon, dll)
│
├── src/
│   ├── app/                        # Folder utama Next.js App Router
│   │   ├── api/                    # API Routes (Frontend proxy)
│   │   │   ├── auth/
│   │   │   │   └── route.ts        # POST Login API (proxy to backend)
│   │   │   ├── auth/
│   │   │   │   └── register.ts     # POST Register API
│   │   │   ├── geocode/
│   │   │   │   └── reverse/
│   │   │   │       └── route.ts    # Reverse geocoding API (via Nominatim)
│   │   │   ├── stories/            # API untuk story CRUD
│   │   │   │   ├── [id]/           # Endpoint untuk delete by id
│   │   │   │   │   └── route.ts
│   │   │   │   └── route.ts        # GET, POST story
│   │   │   └── storiesApi.ts       # Story API logic terpisah
│   │   │
│   │   ├── login/
│   │   │   └── page.tsx            # Halaman Login
│   │   ├── register/
│   │   │   └── page.tsx            # Halaman Registrasi
│   │   ├── stories/
│   │   │   └── page.tsx            # Halaman Tambah Story
│   │   ├── page.tsx                # Home Page
│   │   ├── layout.tsx              # Root layout (Header, AppProvider)
│   │
│   ├── components/                 # Komponen Reusable
│   │   ├── CameraCapture.tsx       # Komponen kamera (ambil foto langsung)
│   │   ├── footer.tsx              # Footer lengkap dengan tech stack
│   │   ├── header.tsx              # Header navigasi + avatar user
│   │   ├── hero.tsx (mungkin)      # Hero section (jika ada)
│   │   ├── homeContent.tsx         # Konten utama halaman Home
│   │   ├── LocationPicker.tsx      # Komponen peta untuk pilih lokasi
│   │   ├── MapSection.tsx          # Bagian peta (jika dipisah)
│   │   ├── StoriesList.tsx         # Daftar story (belum tampil penuh)
│   │   ├── StoryCard.tsx           # Komponen tampilan kartu cerita
│   │   └── ui/                     # Komponen UI dari shadcn/ui
│   │       ├── button.tsx
│   │       ├── card.tsx
│   │       ├── input.tsx
│   │       ├── select.tsx
│   │       ├── textarea.tsx
│   │       ├── progress.tsx
│   │       ├── form/...            # (komponen form shadcn/ui)
│   │       └── ...dll
│   │
│   ├── lib/                        # Helper & utilitas
│   │   ├── token.ts                # getToken, setToken, clearToken
│   │   ├── validations/
│   │   │   └── story.ts            # Schema Zod untuk form story
│   │
│   ├── utils/                      # Konfigurasi dan context
│   │   ├── config.ts               # BASE_URL dsb
│   │   └── StoryContext.tsx        # Context user login (Provider)
│
├── styles/                         # Global CSS (opsional jika ada)
│   └── globals.css
│
├── .env.local                      # Variabel lingkungan (BASE_URL dll)
├── tsconfig.json                   # Konfigurasi TypeScript
├── tailwind.config.js              # Konfigurasi Tailwind
├── postcss.config.js               # Konfigurasi PostCSS
├── next.config.js                  # Konfigurasi Next.js
├── package.json
├── README.md
└── ...

##### **Deskripsi Alur Penggunaan Program**
1. **Pengguna baru mendaftar** melalui form register. Sistem akan mengirim data ke backend dan memberikan konfirmasi.
2. **Login dilakukan** menggunakan email dan password yang telah terdaftar. Jika berhasil, token disimpan untuk autentikasi selanjutnya.
3. **Halaman utama (dashboard)** menyambut pengguna dan memberi akses ke fitur tambah cerita.
4. **Pengguna membuat cerita** dengan:
   - Menulis judul dan deskripsi
   - Mengunggah gambar (bisa langsung dari kamera)
   - Memilih lokasi menggunakan peta interaktif
5. **Cerita dikirim** ke backend menggunakan FormData dan token autentikasi.
6. **Cerita berhasil dibuat** ditampilkan pada halaman `stories`, dan bisa dikelola (misal: dihapus).
7. **Logout atau sesi habis**, pengguna kembali ke halaman login.

###### SOURCE CODE FRONT END 

FOLDER API (AUTH + GEODCODE + STORIES)

// src/app/api/auth/route.ts
import { NextResponse } from "next/server";
import { BASE_URL } from '../../../utils/config';

export async function POST(request: Request) {
    try {
        const body = await request.json();

        // Validasi input
        if (!body.email || !body.password) {
            return NextResponse.json(
                { message: "Email dan password harus diisi" },
                { status: 400 }
            );
        }

        // Forward request ke backend API
        const response = await fetch(`${BASE_URL}/api/login`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                email: body.email,
                password: body.password,
            }),
        });

        const data = await response.json();

        if (!response.ok) {
            return NextResponse.json(
                { message: data.message || "Login gagal" },
                { status: response.status }
            );
        }

        // Return success response
        return NextResponse.json({
            message: data.message,
            token: data.token,
        });
    } catch (error: unknown) {
        console.error("Login API Error:", error);

        let message = "Terjadi kesalahan server";
        if (error instanceof Error) {
            message = error.message;
        }

        return NextResponse.json({ message }, { status: 500 });
    }
}



// src/app/api/geocode/reverse/route.ts
import { NextResponse } from "next/server";

export async function GET(req: Request) {
    const { searchParams } = new URL(req.url);
    const lat = searchParams.get("lat");
    const lon = searchParams.get("lon");

    if (!lat || !lon) {
        return NextResponse.json({ error: "Missing coordinates" }, { status: 400 });
    }

    try {
        const response = await fetch(
            `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}&zoom=18&addressdetails=1`,
            {
                headers: {
                    "User-Agent": "YourAppName/1.0 (email@example.com)",
                },
            }
        );

        if (!response.ok) {
            throw new Error("Nominatim error");
        }

        const data = await response.json();
        return NextResponse.json({ address: data.display_name });
    } catch (err: unknown) {
        console.error("Error fetching address:", err);
        return NextResponse.json(
            { error: "Failed to fetch address" },
            { status: 500 }
        );
    }
}



// src/app/api/storiesApi.ts
import { getToken } from "../lib/token";
import { BASE_URL } from "../../utils/config";
import {
    CreateStoryFormData,
    Story,
    ApiResponse,
} from "../../lib/validations/story";

export const storiesApi = {
    // Get all stories
    getStories: async (): Promise<Story[]> => {
        try {
            const token = getToken();
            const response = await fetch(`${BASE_URL}/api/stories`, {
                headers: {
                    Authorization: `Bearer ${token}`,
                    "Content-Type": "application/json",
                },
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                throw new Error(errorData.message || `HTTP error! ${response.status}`);
            }

            const stories = await response.json();
            return stories;
        } catch (err) {
            console.error("Failed to fetch stories:", err);
            throw err;
        }
    },

    // Create new story
    createStory: async (
        data: CreateStoryFormData
    ): Promise<ApiResponse<Story>> => {
        try {
            const token = getToken();
            const formData = new FormData();

            formData.append("title", data.title);
            formData.append("content", data.content);
            formData.append("image", data.image);

            if (data.latitude !== undefined) {
                formData.append("latitude", data.latitude.toString());
            }
            if (data.longitude !== undefined) {
                formData.append("longitude", data.longitude.toString());
            }

            const response = await fetch(`${BASE_URL}/api/stories`, {
                method: "POST",
                headers: {
                    Authorization: `Bearer ${token}`,
                    // Jangan set Content-Type untuk FormData, biarkan browser yang handle
                },
                body: formData,
            });

            const result = await response.json();

            if (!response.ok) {
                console.error("Server response:", result);
                throw new Error(
                    result.message || result.error || "Failed to create story"
                );
            }

            return result;
        } catch (err) {
            console.error("Failed to create story:", err);
            throw err;
        }
    },

    // Delete story
    deleteStory: async (id: number): Promise<ApiResponse> => {
        try {
            const token = getToken();

            if (!token) {
                throw new Error("No authentication token found");
            }

            console.log(`Attempting to delete story with ID: ${id}`);

            const response = await fetch(`${BASE_URL}/api/stories/${id}`, {
                method: "DELETE",
                headers: {
                    Authorization: `Bearer ${token}`,
                    "Content-Type": "application/json",
                },
            });

            if (!response.ok) {
                let errorMessage = `Failed to delete story (${response.status})`;

                try {
                    const errorData = await response.json();
                    errorMessage = errorData.message || errorData.error || errorMessage;
                } catch {
                    // Jika response bukan JSON, gunakan status text
                    errorMessage = response.statusText || errorMessage;
                }

                console.error("Delete request failed:", {
                    status: response.status,
                    statusText: response.statusText,
                    url: response.url,
                });

                throw new Error(errorMessage);
            }

            const result = await response.json();
            return result;
        } catch (err) {
            console.error("Failed to delete story:", err);
            throw err;
        }
    },
};



// src/app/api/stories/route.ts
import { storiesApi } from "../storiesApi";

export async function GET() {
    try {
        const stories = await storiesApi.getStories();
        return Response.json(stories);
    } catch (err: unknown) {
        console.error("Get stories error:", err);
        const errorMessage = err instanceof Error ? err.message : "Gagal mengambil stories";
        return new Response(
            JSON.stringify({ error: errorMessage }), 
            { status: 500 }
        );
    }
}

export async function POST(request: Request) {
    try {
        const formData = await request.formData();
        const data = {
            title: formData.get("title") as string,
            content: formData.get("content") as string,
            image: formData.get("image") as File,
            latitude: Number(formData.get("latitude")),
            longitude: Number(formData.get("longitude")),
        };

        const result = await storiesApi.createStory(data);
        return Response.json(result);
    } catch (err: unknown) {
        console.error("Create story error:", err);
        const errorMessage = err instanceof Error ? err.message : "Terjadi kesalahan tak dikenal";
        return new Response(
            JSON.stringify({ error: errorMessage }), 
            { status: 500 }
        );
    }
}



// src/app/api/stories/[id]/route.ts
import { storiesApi } from "../../storiesApi";

export async function DELETE(
    request: Request,
    { params }: { params: Promise<{ id: string }> }
) {
    try {
        const { id: idParam } = await params;
        const id = Number(idParam);

        if (isNaN(id)) {
            return new Response(
                JSON.stringify({ error: "'id' harus berupa angka" }),
                { status: 400 }
            );
        }

        const result = await storiesApi.deleteStory(id);
        return Response.json(result);
    } catch (err: unknown) {
        console.error("Delete error:", err);
        const errorMessage = err instanceof Error ? err.message : "Terjadi kesalahan saat menghapus";
        return new Response(
            JSON.stringify({ error: errorMessage }),
            { status: 500 }
        );
    }
}


FOLDER AUTH (LOGIN + REGISTER)
// src/app/login/page.tsx
"use client";
import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { setToken, isLoggedIn } from "../lib/token";
import { Eye, EyeOff, BookOpen, Sparkles, User, Lock } from "lucide-react";

interface SparklePosition {
    left: string;
    top: string;
    animationDelay: string;
    fontSize: string;
}

export default function LoginPage() {
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [showPassword, setShowPassword] = useState(false);
    const [error, setError] = useState("");
    const [isLoading, setIsLoading] = useState(false);
    const [sparklePositions, setSparklePositions] = useState<SparklePosition[]>([]);
    const router = useRouter();

    // Initialize sparkle positions after component mounts
    useEffect(() => {

        const positions = Array.from({ length: 20 }, () => ({
            left: `${Math.random() * 100}%`,
            top: `${Math.random() * 100}%`,
            animationDelay: `${Math.random() * 3}s`,
            fontSize: `${Math.random() * 10 + 10}px`,
        }));
        setSparklePositions(positions);
    }, []);

    // Cek jika user sudah login, redirect ke home
    useEffect(() => {
        if (typeof window !== "undefined" && isLoggedIn()) {
            console.log("User already logged in, redirecting to home");
            router.replace('/');
        }
    }, [router]);

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setError("");
        setIsLoading(true);

        try {
            // Validasi client-side
            if (!email.trim() || !password.trim()) {
                throw new Error("Email dan password harus diisi");
            }

            // Call API login
            const response = await fetch("/api/auth", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    email: email.trim(),
                    password: password.trim()
                }),
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.message || "Login gagal");
            }

            // Simpan token
            if (data.token) {
                console.log("Login successful, saving token and redirecting");
                setToken(data.token);
                // Pastikan token tersimpan sebelum redirect
                await new Promise(resolve => setTimeout(resolve, 100));
                // Gunakan window.location untuk hard redirect yang lebih reliable
                window.location.href = '/';
            } else {
                throw new Error("Token tidak ditemukan");
            }

        } catch (err: unknown) {
            console.error("Login error:", err);
            if (err instanceof Error) {
                setError(err.message);
            } else {
                setError("Terjadi kesalahan saat login");
            }
        } finally {
            setIsLoading(false);
        }
    };


    return (
        <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 flex items-center justify-center p-4 relative overflow-hidden">
            {/* Animated Background Elements */}
            <div className="absolute inset-0 overflow-hidden">
                <div className="absolute -top-40 -right-40 w-80 h-80 bg-purple-500 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-pulse"></div>
                <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-blue-500 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-pulse animation-delay-2000"></div>
                <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 bg-indigo-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse animation-delay-4000"></div>
            </div>

            {/* Floating Sparkles */}
            <div className="absolute inset-0 pointer-events-none">
                {sparklePositions.map((position, i) => (
                    <Sparkles
                        key={i}
                        className="absolute text-white opacity-20 animate-pulse"
                        style={{
                            left: position.left,
                            top: position.top,
                            animationDelay: position.animationDelay,
                            fontSize: position.fontSize,
                        }}
                    />
                ))}
            </div>

            <div className="relative z-10 w-full max-w-md">
                {/* Logo and Welcome Section */}
                <div className="text-center mb-8">
                    <div className="inline-flex items-center justify-center w-20 h-20 bg-gradient-to-r from-purple-500 to-blue-500 rounded-2xl mb-6 shadow-2xl transform hover:scale-105 transition-transform duration-300">
                        <BookOpen className="w-10 h-10 text-white" />
                    </div>
                    <h1 className="text-4xl font-bold text-white mb-2 tracking-tight">
                        Story App
                    </h1>
                    <p className="text-blue-100 text-lg font-medium">
                        Selamat Datang Kembali
                    </p>
                    <p className="text-blue-200 text-sm mt-1">
                        Silakan login untuk mulai menggunakan aplikasi
                    </p>
                </div>

                {/* Login Form */}
                <form onSubmit={handleSubmit} className="backdrop-blur-lg bg-white/10 rounded-3xl p-8 shadow-2xl border border-white/20">
                    <div className="space-y-6">
                        {/* Email Input */}
                        <div className="space-y-2">
                            <label className="text-sm font-medium text-white/90 flex items-center gap-2">
                                <User className="w-4 h-4" />
                                Email
                            </label>
                            <div className="relative">
                                <input
                                    type="email"
                                    value={email}
                                    onChange={(e) => setEmail(e.target.value)}
                                    className="w-full px-4 py-4 bg-white/10 border border-white/20 rounded-xl text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-300 backdrop-blur-sm"
                                    placeholder="Masukkan email Anda"
                                    required
                                    disabled={isLoading}
                                />
                                <div className="absolute inset-0 bg-gradient-to-r from-blue-400/20 to-purple-400/20 rounded-xl opacity-0 hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
                            </div>
                        </div>

                        {/* Password Input */}
                        <div className="space-y-2">
                            <label className="text-sm font-medium text-white/90 flex items-center gap-2">
                                <Lock className="w-4 h-4" />
                                Password
                            </label>
                            <div className="relative">
                                <input
                                    type={showPassword ? "text" : "password"}
                                    value={password}
                                    onChange={(e) => setPassword(e.target.value)}
                                    className="w-full px-4 py-4 pr-12 bg-white/10 border border-white/20 rounded-xl text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-300 backdrop-blur-sm"
                                    placeholder="Masukkan password Anda"
                                    required
                                    disabled={isLoading}
                                />
                                <button
                                    type="button"
                                    onClick={() => setShowPassword(!showPassword)}
                                    className="absolute right-3 top-1/2 transform -translate-y-1/2 text-white/60 hover:text-white transition-colors duration-200 disabled:opacity-50"
                                    disabled={isLoading}
                                >
                                    {showPassword ? (
                                        <EyeOff className="w-5 h-5" />
                                    ) : (
                                        <Eye className="w-5 h-5" />
                                    )}
                                </button>
                                <div className="absolute inset-0 bg-gradient-to-r from-blue-400/20 to-purple-400/20 rounded-xl opacity-0 hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
                            </div>
                        </div>

                        {/* Error Message */}
                        {error && (
                            <div className="p-4 bg-red-500/20 border border-red-500/30 rounded-xl text-red-100 text-sm animate-shake">
                                {error}
                            </div>
                        )}

                        {/* Login Button */}
                        <button
                            type="submit"
                            disabled={isLoading}
                            className="w-full py-4 px-6 bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white font-semibold rounded-xl shadow-lg hover:shadow-xl transform hover:scale-[1.02] focus:outline-none focus:ring-2 focus:ring-blue-400 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
                        >
                            {isLoading ? (
                                <div className="flex items-center justify-center gap-2">
                                    <div className="w-5 h-5 border-2 border-white/20 border-t-white rounded-full animate-spin"></div>
                                    Sedang masuk...
                                </div>
                            ) : (
                                "Masuk"
                            )}
                        </button>
                    </div>

                    {/* Register Link */}
                    <div className="mt-8 text-center">
                        <p className="text-blue-100 text-sm">
                            Belum punya akun?{" "}
                            <button
                                type="button"
                                className="text-blue-300 hover:text-white font-semibold underline decoration-2 underline-offset-2 hover:decoration-blue-300 transition-colors duration-200"
                                disabled={isLoading}
                            >
                                Daftar di sini
                            </button>
                        </p>
                    </div>

                    {/* Forgot Password */}
                    <div className="mt-4 text-center">
                        <button
                            type="button"
                            className="text-blue-200 hover:text-white text-sm underline decoration-1 underline-offset-2 hover:decoration-blue-200 transition-colors duration-200"
                            disabled={isLoading}
                        >
                            Lupa password?
                        </button>
                    </div>
                </form>

                {/* Footer */}
                <div className="text-center mt-8">
                    <p className="text-blue-200/60 text-xs">
                        © 2024 Story App. Semua hak dilindungi.
                    </p>
                </div>
            </div>

            <style jsx>{`
                @keyframes shake {
                    0%, 100% {
                        transform: translateX(0);
                    }
                    25% {
                        transform: translateX(-5px);
                    }
                    75% {
                        transform: translateX(5px);
                    }
                }

                .animate-shake {
                    animation: shake 0.5s ease-in-out;
                }

                .animation-delay-2000 {
                    animation-delay: 2s;
                }

                .animation-delay-4000 {
                    animation-delay: 4s;
                }
            `}</style>
        </div>
    );
}



// src/app/register/page.tsx
'use client';
import { useState, useEffect } from 'react';
import { Eye, EyeOff, BookOpen, Sparkles, User, Lock, Mail, UserPlus } from 'lucide-react';

export default function RegisterPage() {
    const [name, setName] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [showPassword, setShowPassword] = useState(false);
    const [error, setError] = useState('');
    const [isLoading, setIsLoading] = useState(false);

    type Sparkle = {
        id: number;
        left: number;
        top: number;
        animationDelay: number;
        fontSize: number;
    };
    const [sparklesData, setSparklesData] = useState<Sparkle[]>([]);
    const [isClient, setIsClient] = useState(false);

    // Generate sparkles data only on client side
    useEffect(() => {
        setIsClient(true);
        const sparkles = [...Array(20)].map((_, i) => ({
            id: i,
            left: Math.random() * 100,
            top: Math.random() * 100,
            animationDelay: Math.random() * 3,
            fontSize: Math.random() * 10 + 10
        }));
        setSparklesData(sparkles);
    }, []);

    const handleSubmit = async (e: React.MouseEvent<HTMLButtonElement>) => {
        e.preventDefault();
        setError('');
        setIsLoading(true);

        try {
            const response = await fetch('/api/auth/register', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ name, email, password }),
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Registration failed');
            }

            alert('Registrasi berhasil! Silakan login.');
            // router.push('/login');
        } catch (err) {
            if (err instanceof Error) {
                setError(err.message || 'Registration failed');
            } else {
                setError('Registration failed');
            }
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div className="min-h-screen bg-gradient-to-br from-emerald-900 via-teal-900 to-cyan-900 flex items-center justify-center p-4 relative overflow-hidden">
            {/* Animated Background Elements */}
            <div className="absolute inset-0 overflow-hidden">
                <div className="absolute -top-40 -right-40 w-80 h-80 bg-emerald-500 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-pulse"></div>
                <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-teal-500 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-pulse" style={{ animationDelay: '2s' }}></div>
                <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 bg-cyan-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse" style={{ animationDelay: '4s' }}></div>
            </div>

            {/* Floating Sparkles - Only render on client */}
            {isClient && (
                <div className="absolute inset-0 pointer-events-none">
                    {sparklesData.map((sparkle) => (
                        <Sparkles
                            key={sparkle.id}
                            className="absolute text-white opacity-20 animate-pulse"
                            style={{
                                left: `${sparkle.left}%`,
                                top: `${sparkle.top}%`,
                                animationDelay: `${sparkle.animationDelay}s`,
                                fontSize: `${sparkle.fontSize}px`
                            }}
                        />
                    ))}
                </div>
            )}

            <div className="relative z-10 w-full max-w-md">
                {/* Logo and Welcome Section */}
                <div className="text-center mb-8">
                    <div className="inline-flex items-center justify-center w-20 h-20 bg-gradient-to-r from-emerald-500 to-teal-500 rounded-2xl mb-6 shadow-2xl transform hover:scale-105 transition-transform duration-300">
                        <BookOpen className="w-10 h-10 text-white" />
                    </div>
                    <h1 className="text-4xl font-bold text-white mb-2 tracking-tight">
                        Story App
                    </h1>
                    <p className="text-teal-100 text-lg font-medium">
                        Bergabung dengan Kami
                    </p>
                    <p className="text-teal-200 text-sm mt-1">
                        Buat akun baru untuk mulai berbagi cerita
                    </p>
                </div>

                {/* Register Form */}
                <div className="backdrop-blur-lg bg-white/10 rounded-3xl p-8 shadow-2xl border border-white/20">
                    <div className="space-y-6">
                        {/* Name Input */}
                        <div className="space-y-2">
                            <label className="text-sm font-medium text-white/90 flex items-center gap-2">
                                <User className="w-4 h-4" />
                                Nama Lengkap
                            </label>
                            <div className="relative">
                                <input
                                    type="text"
                                    value={name}
                                    onChange={(e) => setName(e.target.value)}
                                    className="w-full px-4 py-4 bg-white/10 border border-white/20 rounded-xl text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-teal-400 focus:border-transparent transition-all duration-300 backdrop-blur-sm"
                                    placeholder="Masukkan nama lengkap Anda"
                                    required
                                />
                                <div className="absolute inset-0 bg-gradient-to-r from-teal-400/20 to-emerald-400/20 rounded-xl opacity-0 hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
                            </div>
                        </div>

                        {/* Email Input */}
                        <div className="space-y-2">
                            <label className="text-sm font-medium text-white/90 flex items-center gap-2">
                                <Mail className="w-4 h-4" />
                                Email
                            </label>
                            <div className="relative">
                                <input
                                    type="email"
                                    value={email}
                                    onChange={(e) => setEmail(e.target.value)}
                                    className="w-full px-4 py-4 bg-white/10 border border-white/20 rounded-xl text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-teal-400 focus:border-transparent transition-all duration-300 backdrop-blur-sm"
                                    placeholder="Masukkan email Anda"
                                    required
                                />
                                <div className="absolute inset-0 bg-gradient-to-r from-teal-400/20 to-emerald-400/20 rounded-xl opacity-0 hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
                            </div>
                        </div>

                        {/* Password Input */}
                        <div className="space-y-2">
                            <label className="text-sm font-medium text-white/90 flex items-center gap-2">
                                <Lock className="w-4 h-4" />
                                Password
                            </label>
                            <div className="relative">
                                <input
                                    type={showPassword ? 'text' : 'password'}
                                    value={password}
                                    onChange={(e) => setPassword(e.target.value)}
                                    className="w-full px-4 py-4 pr-12 bg-white/10 border border-white/20 rounded-xl text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-teal-400 focus:border-transparent transition-all duration-300 backdrop-blur-sm"
                                    placeholder="Buat password yang kuat"
                                    required
                                />
                                <button
                                    type="button"
                                    onClick={() => setShowPassword(!showPassword)}
                                    className="absolute right-3 top-1/2 transform -translate-y-1/2 text-white/60 hover:text-white transition-colors duration-200"
                                >
                                    {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                                </button>
                                <div className="absolute inset-0 bg-gradient-to-r from-teal-400/20 to-emerald-400/20 rounded-xl opacity-0 hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
                            </div>
                            <div className="text-xs text-teal-200/70 mt-1">
                                Minimal 8 karakter dengan kombinasi huruf dan angka
                            </div>
                        </div>

                        {/* Error Message */}
                        {error && (
                            <div className="p-4 bg-red-500/20 border border-red-500/30 rounded-xl text-red-100 text-sm">
                                {error}
                            </div>
                        )}

                        {/* Register Button */}
                        <button
                            onClick={handleSubmit}
                            disabled={isLoading}
                            className="w-full py-4 px-6 bg-gradient-to-r from-teal-500 to-emerald-600 hover:from-teal-600 hover:to-emerald-700 text-white font-semibold rounded-xl shadow-lg hover:shadow-xl transform hover:scale-[1.02] focus:outline-none focus:ring-2 focus:ring-teal-400 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none flex items-center justify-center gap-2"
                        >
                            {isLoading ? (
                                <div className="flex items-center justify-center gap-2">
                                    <div className="w-5 h-5 border-2 border-white/20 border-t-white rounded-full animate-spin"></div>
                                    Mendaftar...
                                </div>
                            ) : (
                                <>
                                    <UserPlus className="w-5 h-5" />
                                    Daftar Sekarang
                                </>
                            )}
                        </button>

                        {/* Terms and Conditions */}
                        <div className="text-center text-xs text-teal-200/70 leading-relaxed">
                            Dengan mendaftar, Anda menyetujui{' '}
                            <button className="text-teal-300 hover:text-white underline decoration-1 underline-offset-2 transition-colors duration-200">
                                Syarat & Ketentuan
                            </button>
                            {' '}dan{' '}
                            <button className="text-teal-300 hover:text-white underline decoration-1 underline-offset-2 transition-colors duration-200">
                                Kebijakan Privasi
                            </button>
                            {' '}kami.
                        </div>
                    </div>

                    {/* Login Link */}
                    <div className="mt-8 text-center">
                        <p className="text-teal-100 text-sm">
                            Sudah punya akun?{' '}
                            <button className="text-teal-300 hover:text-white font-semibold underline decoration-2 underline-offset-2 hover:decoration-teal-300 transition-colors duration-200">
                                Masuk di sini
                            </button>
                        </p>
                    </div>
                </div>

                {/* Footer */}
                <div className="text-center mt-8">
                    <p className="text-teal-200/60 text-xs">
                        © 2024 Story App. Semua hak dilindungi.
                    </p>
                </div>
            </div>
        </div>
    );
}


FOLDER PAGE (STORIES + LAYOUT + HOME)
// src\app\stories\page.tsx
/* eslint-disable */

'use client';
import { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { toast } from 'react-hot-toast';
import { useRouter } from 'next/navigation';

import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Progress } from '@/components/ui/progress';

import { createStorySchema, type CreateStoryFormData } from '@/lib/validations/story';
import { storiesApi } from '../api/storiesApi';
import LocationPicker from '@/components/LocationPicker';
import CameraCapture from '@/components/CameraCapture';
import Image from 'next/image';

export default function CreateStoryPage() {
    const router = useRouter();
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [uploadProgress, setUploadProgress] = useState(0);
    const [previewImage, setPreviewImage] = useState<string | null>(null);
    const [capturedImage, setCapturedImage] = useState<File | null>(null);
    const [imageSize, setImageSize] = useState<{ width: number; height: number } | null>(null);
    const [isCameraActive, setIsCameraActive] = useState(false);
    const [selectedLocation, setSelectedLocation] = useState<{
        lat: number;
        lng: number;
        address?: string;
    } | null>(null);

    const form = useForm<CreateStoryFormData>({
        resolver: zodResolver(createStorySchema),
        defaultValues: {
            title: '',
            content: '',
            image: null as unknown as File,
            latitude: undefined,
            longitude: undefined,
        },
    });

    // Handle file upload dan preview
    const handleImageUpload = (file: File) => {
        if (file) {
            const reader = new FileReader();
            reader.onload = (e) => {
                setPreviewImage(e.target?.result as string);
            };
            reader.readAsDataURL(file);
            form.setValue('image', file);
            setCapturedImage(null);
        }
    };

    // Handle camera capture
    const handleCameraCapture = (file: File, dataUrl: string) => {
        setCapturedImage(file);
        setPreviewImage(dataUrl);
        setImageSize({
            width: 640,
            height: 480,
        });
        form.setValue('image', file, { shouldValidate: true });
    };

    // Clear image
    const clearImage = () => {
        setPreviewImage(null);
        setCapturedImage(null);
        form.setValue('image', null as unknown as File);

        // Reset file input
        const fileInput = document.querySelector('input[type="file"]') as HTMLInputElement;
        if (fileInput) fileInput.value = '';
    };

    // Handle form submission dengan progress tracking
    const onSubmit = async (data: CreateStoryFormData) => {
        if (!(data.image instanceof File)) {
            toast.error('File image tidak valid. Pastikan Anda memilih file yang benar.');
            return;
        }
        
        // Validasi tambahan untuk lokasi
        if (selectedLocation) {
            data.latitude = selectedLocation.lat;
            data.longitude = selectedLocation.lng;
        } else {
            // Jika lokasi tidak dipilih, set ke undefined
            data.latitude = undefined;
            data.longitude = undefined;
        }

        try {
            setIsSubmitting(true);
            setUploadProgress(0);

            // Simulate upload progress
            const progressInterval = setInterval(() => {
                setUploadProgress(prev => Math.min(prev + 10, 90));
            }, 200);

            const result = await storiesApi.createStory(data);

            clearInterval(progressInterval);
            setUploadProgress(100);
            
            // RESET FORM DAN STATE SETELAH BERHASIL
            form.reset();
            setPreviewImage(null);
            setCapturedImage(null);
            setSelectedLocation(null);
            sessionStorage.removeItem('story-draft');
            setImageSize(null);

            // TAMBAHKAN FEEDBACK VISUAL LEBIH JELAS
            toast.success('Story berhasil dibuat! 🎉', {
                duration: 3000,
                icon: '✅',
                style: {
                    border: '1px solid #4CAF50',
                    padding: '16px',
                }
            });

            // Redirect setelah delay singkat
            setTimeout(() => {
                router.push('/stories');
            }, 1500);

        } catch (error) {
            console.error('Error creating story:', error);
            toast.error(
                error instanceof Error
                    ? error.message
                    : 'Gagal membuat story. Silakan coba lagi.',
                {
                    duration: 4000,
                    style: {
                        border: '1px solid #FF5252',
                        padding: '16px',
                    }
                }
            );
            setUploadProgress(0);
        } finally {
            setIsSubmitting(false);
        }
    };

    // Auto-save draft
    useEffect(() => {
        const formData = form.watch();
        const draft = {
            title: formData.title,
            content: formData.content,
            timestamp: Date.now()
        };

        // Save to sessionStorage
        if (formData.title || formData.content) {
            sessionStorage.setItem('story-draft', JSON.stringify(draft));
        }
    }, [form.watch()]);

    // Load draft on mount
    useEffect(() => {
        const savedDraft = sessionStorage.getItem('story-draft');
        if (savedDraft) {
            try {
                const draft = JSON.parse(savedDraft);
                // Only load if draft is less than 1 hour old
                if (Date.now() - draft.timestamp < 3600000) {
                    form.setValue('title', draft.title || '');
                    form.setValue('content', draft.content || '');

                    if (draft.title || draft.content) {
                        toast.success('Draft berhasil dimuat 📝');
                    }
                }
            } catch (error) {
                console.error('Error loading draft:', error);
            }
        }
    }, [form]);

    return (
        <div className="container mx-auto py-8 px-4 mt-10 max-w-3xl">
            {/* TAMBAHKAN FEEDBACK SUCCESS BANNER */}
            {uploadProgress === 100 && (
                <div className="mb-6 p-4 bg-green-100 border border-green-400 text-green-700 rounded-lg flex items-center">
                    <svg className="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                    <span>Story berhasil dibuat! anda dapat mengarahkan ke halaman stories...</span>
                </div>
            )}

            <Card>
                <CardHeader>
                    <CardTitle className="text-2xl font-bold">📝 Tambah Story Baru</CardTitle>
                    <CardDescription>
                        Bagikan cerita Anda dengan foto dan lokasi
                    </CardDescription>

                    {/* Upload Progress */}
                    {isSubmitting && (
                        <div className="space-y-2">
                            <div className="flex justify-between text-sm">
                                <span>Uploading story...</span>
                                <span>{uploadProgress}%</span>
                            </div>
                            <Progress value={uploadProgress} className="h-2" />
                        </div>
                    )}
                </CardHeader>

                <CardContent>
                    <Form {...form}>
                        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">

                            {/* Title Field */}
                            <FormField
                                control={form.control}
                                name="title"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Judul Story</FormLabel>
                                        <FormControl>
                                            <Input
                                                placeholder="Masukkan judul yang anda inginkan..."
                                                disabled={isSubmitting}
                                                {...field}
                                            />
                                        </FormControl>
                                        <FormDescription>
                                            Judul yang baik akan menarik lebih banyak pembaca
                                        </FormDescription>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />

                            {/* Content Field */}
                            <FormField
                                control={form.control}
                                name="content"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Deskripsi</FormLabel>
                                        <FormControl>
                                            <Textarea
                                                placeholder="Ceritakan pengalaman Anda..."
                                                className="min-h-[120px] resize-none"
                                                disabled={isSubmitting}
                                                {...field}
                                            />
                                        </FormControl>
                                        <FormDescription>
                                            Ceritakan detail yang menarik dari pengalaman Anda
                                        </FormDescription>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />

                            {/* Image Upload dengan Camera Integration */}
                            <FormField
                                control={form.control}
                                name="image"
                                render={({ field: { onChange, value, ...field } }) => (
                                    <FormItem>
                                        <FormLabel>Foto</FormLabel>
                                        <FormControl>
                                            <div className="space-y-4">
                                                {/* Camera Capture Component */}
                                                <CameraCapture
                                                    onCapture={handleCameraCapture}
                                                    disabled={isSubmitting}
                                                    onCameraStateChange={setIsCameraActive}
                                                />

                                                {/* Manual File Upload */}
                                                <div className="relative">
                                                    <Input
                                                        type="file"
                                                        accept="image/jpeg,image/jpg,image/png,image/webp"
                                                        onChange={(e) => {
                                                            const file = e.target.files?.[0];
                                                            if (file) {
                                                                onChange(file);
                                                                handleImageUpload(file);
                                                            }
                                                        }}
                                                        disabled={isSubmitting || isCameraActive}
                                                        {...field}
                                                    />
                                                    <p className="text-xs text-gray-500 mt-1">
                                                        Atau pilih file dari device Anda
                                                    </p>
                                                </div>

                                                {/* Image Preview */}
                                                {previewImage && (
                                                    <div className="relative">
                                                        <Image
                                                            src={previewImage}
                                                            alt="Preview"
                                                            width={imageSize?.width || 640}
                                                            height={imageSize?.height || 480}
                                                            className="max-w-full h-48 object-contain rounded-lg border shadow-sm bg-gray-50"
                                                            onLoadingComplete={(img) => {
                                                                setImageSize({
                                                                    width: img.naturalWidth,
                                                                    height: img.naturalHeight
                                                                });
                                                            }}
                                                        />
                                                        <Button
                                                            type="button"
                                                            variant="destructive"
                                                            size="sm"
                                                            className="absolute top-2 right-2"
                                                            onClick={clearImage}
                                                            disabled={isSubmitting}
                                                        >
                                                            ✕
                                                        </Button>
                                                        {capturedImage && (
                                                            <div className="absolute bottom-2 left-2 bg-green-100 text-green-800 px-2 py-1 rounded text-xs">
                                                                📸 Foto dari kamera
                                                            </div>
                                                        )}
                                                    </div>
                                                )}
                                            </div>
                                        </FormControl>
                                        <FormDescription>
                                            {isCameraActive
                                                ? "Kamera sedang aktif - upload dinonaktifkan"
                                                : "Ambil foto dengan kamera atau upload dari device (max 5MB)"
                                            }
                                        </FormDescription>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />

                            {/* Map Component untuk Location Picker */}
                            <div className="space-y-4">
                                <FormLabel>Pilih Lokasi (Opsional)</FormLabel>
                                <LocationPicker
                                    onLocationSelect={(location) => {
                                        setSelectedLocation(location);
                                        form.setValue('latitude', location.lat);
                                        form.setValue('longitude', location.lng);
                                    }}
                                    initialLocation={selectedLocation}
                                />
                            </div>

                            {/* Location Display */}
                            {selectedLocation && (
                                <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
                                    <h4 className="font-medium text-green-800">📍 Lokasi Terpilih</h4>
                                    <p className="text-sm text-green-700">
                                        Lat: {selectedLocation.lat.toFixed(6)},
                                        Lng: {selectedLocation.lng.toFixed(6)}
                                    </p>
                                    {selectedLocation.address && (
                                        <p className="text-sm text-green-600 mt-1">
                                            {selectedLocation.address}
                                        </p>
                                    )}
                                </div>
                            )}

                            {/* Form Actions */}
                            <div className="flex gap-4 pt-4 border-t">
                                <Button
                                    type="button"
                                    variant="destructive"
                                    onClick={() => {
                                        // Clear draft on cancel
                                        sessionStorage.removeItem('story-draft');
                                        router.back();
                                    }}
                                    disabled={isSubmitting}
                                    className="flex-1"
                                >
                                    Batal
                                </Button>

                                <Button
                                    type="submit"
                                    variant="default"
                                    disabled={isSubmitting}
                                    className="flex-1 bg-green-600 hover:bg-green-700"
                                >
                                    {isSubmitting ? (
                                        <span className="flex items-center gap-2">
                                            <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                                            Mengirim...
                                        </span>
                                    ) : (
                                        <>
                                            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                                            </svg>
                                            📤 Kirim Story
                                        </>
                                    )}
                                </Button>
                            </div>
                        </form>
                    </Form>
                </CardContent>
            </Card>
        </div>
    );
}



// src/app/layout.tsx
import type { Metadata } from "next";
import { Inter } from 'next/font/google';
import "./globals.css";
import Header from "@/components/header";
import { AppProvider } from "@/utils/StoryContext";


const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: "Next App",
  description: "Story Application",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <head>
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
        <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" async />
        <script src="https://unpkg.com/leaflet.offline" async />
      </head>
      <body className={inter.className}>
          <AppProvider>
            <Header />
            <a href="#main-content" className="sr-only">Lewati ke konten utama</a>
            {children}
          </AppProvider>
      </body>
    </html>
  );
}


// src\app\page.tsx
'use client';
import HomeContent from '../components/homeContent';

export default function HomePage() {
  return <HomeContent />;
}

FOLDER COMPONENT (CAMERA + FOOTER + HEADER + HERO + HOMECONTENT + LOCATIONPICKER + MAPSECTION + STORIESLIST + STORYCARD)
// src/components/CameraCapture.tsx
/* eslint-disable */
'use client';

import { useEffect, useRef, useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from '@/components/ui/select';

interface CameraCaptureProps {
    onCapture: (file: File, dataUrl: string) => void;
    disabled?: boolean;
    onCameraStateChange?: (isActive: boolean) => void;
}

interface CameraDevice {
    deviceId: string;
    label: string;
}

export default function CameraCapture({
    onCapture,
    disabled,
    onCameraStateChange,
}: CameraCaptureProps) {
    const videoRef = useRef<HTMLVideoElement>(null);
    const canvasRef = useRef<HTMLCanvasElement>(null);
    const streamRef = useRef<MediaStream | null>(null);

    const [availableCameras, setAvailableCameras] = useState<CameraDevice[]>([]);
    const [selectedCamera, setSelectedCamera] = useState<string>('');
    const [isStreamActive, setIsStreamActive] = useState(false);
    const [isCaptured, setIsCaptured] = useState(false);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [imageSize, setImageSize] = useState<{ width: number; height: number } | null>(null);
    const [permissionDenied, setPermissionDenied] = useState(false);

    // Get available cameras on mount
    useEffect(() => {
        const detectCameras = async () => {
            try {
                const tempStream = await navigator.mediaDevices.getUserMedia({ video: true });
                tempStream.getTracks().forEach(track => track.stop());

                const devices = await navigator.mediaDevices.enumerateDevices();
                const cameras = devices
                    .filter(device => device.kind === 'videoinput')
                    .map((d, i) => ({
                        deviceId: d.deviceId,
                        label: d.label || `Camera ${i + 1}`,
                    }));

                setAvailableCameras(cameras);
                setSelectedCamera(cameras[0]?.deviceId || '');
                setPermissionDenied(false);
            } catch (err) {
                console.error('Camera permission error:', err);
                setPermissionDenied(true);
                setError('Izin kamera ditolak. Anda bisa unggah manual.');
                onCameraStateChange?.(false);
            }
        };

        detectCameras();
    }, [onCameraStateChange]);

    // Start streaming
    const startCamera = async (cameraId = selectedCamera) => {
        if (!cameraId) return;

        try {
            setIsLoading(true);
            stopCamera();

            const stream = await navigator.mediaDevices.getUserMedia({
                video: {
                    deviceId: { exact: cameraId },
                    width: { ideal: 1280 },
                    height: { ideal: 720 },
                },
            });

            streamRef.current = stream;

            // Delay untuk memastikan ref ter-render
            setTimeout(async () => {
                if (videoRef.current) {
                    videoRef.current.srcObject = stream;
                    try {
                        await videoRef.current.play();
                        setIsStreamActive(true);
                        setIsCaptured(false);
                        setError(null);
                        onCameraStateChange?.(true);
                    } catch (playError) {
                        console.warn('Autoplay error:', playError);
                        setError('Klik video untuk mulai streaming.');
                        videoRef.current.addEventListener('click', () => {
                            videoRef.current?.play();
                        });
                    }
                }
            }, 100);
        } catch (err) {
            console.error('Failed to start camera:', err);
            setError('Gagal membuka kamera.');
            setPermissionDenied(true);
            onCameraStateChange?.(false);
        } finally {
            setIsLoading(false);
        }
    };

    const stopCamera = () => {
        streamRef.current?.getTracks().forEach(t => t.stop());
        streamRef.current = null;

        if (videoRef.current) {
            videoRef.current.srcObject = null;
            videoRef.current.pause();
        }

        setIsStreamActive(false);
        onCameraStateChange?.(false);
    };

    const capturePhoto = () => {
        if (!videoRef.current || !canvasRef.current) return;


        const video = videoRef.current;
        const canvas = canvasRef.current;
        const ctx = canvas.getContext('2d');
        if (!ctx) return;

        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;

        ctx.save();
        ctx.scale(-1, 1);
        ctx.drawImage(video, -canvas.width, 0, canvas.width, canvas.height);
        ctx.restore();

        setImageSize({
            width: video.videoWidth,
            height: video.videoHeight
        });


        canvas.toBlob(blob => {
            if (blob) {
                const file = new File([blob], `photo-${Date.now()}.jpg`, { type: 'image/jpeg' });
                const dataUrl = canvas.toDataURL('image/jpeg', 0.8);
                onCapture(file, dataUrl);
                setIsCaptured(true);
                stopCamera();
            }
        }, 'image/jpeg', 0.8);
    };

    const retakePhoto = () => {
        setIsCaptured(false);
        startCamera();
    };

    const switchCamera = (cameraId: string) => {
        setSelectedCamera(cameraId);
        if (isStreamActive) {
            stopCamera();
            setTimeout(() => startCamera(cameraId), 300);
        }
    };

    useEffect(() => {
        return () => {
            stopCamera();
        };
    }, []);

    return (
        <Card>
            <CardContent className="p-4">
                <div className="space-y-4">
                    {/* Camera controls */}
                    <div className="flex flex-wrap gap-3 items-center">
                        {availableCameras.length > 1 && !permissionDenied && (
                            <Select
                                value={selectedCamera}
                                onValueChange={switchCamera}
                                disabled={disabled || isLoading || isStreamActive}
                            >
                                <SelectTrigger className="w-48">
                                    <SelectValue placeholder="Pilih kamera" />
                                </SelectTrigger>
                                <SelectContent>
                                    {availableCameras.map((cam) => (
                                        <SelectItem key={cam.deviceId} value={cam.deviceId}>
                                            {cam.label}
                                        </SelectItem>
                                    ))}
                                </SelectContent>
                            </Select>
                        )}

                        {!permissionDenied && (
                            <Button
                                type="button"
                                onClick={() => (isStreamActive ? stopCamera() : startCamera())}
                                disabled={disabled || isLoading}
                                variant={isStreamActive ? 'destructive' : 'default'}
                            >
                                {isStreamActive ? '⛔ Tutup Kamera' : '📷 Buka Kamera'}
                            </Button>
                        )}

                        {isStreamActive && (
                            <Button onClick={capturePhoto} disabled={disabled}>
                                📸 Ambil Foto
                            </Button>
                        )}

                        {isCaptured && (
                            <Button variant="outline" onClick={retakePhoto} disabled={disabled}>
                                🔄 Ambil Ulang
                            </Button>
                        )}
                    </div>

                    {/* Error */}
                    {error && (
                        <div className="p-3 bg-red-50 border border-red-200 rounded text-sm text-red-800">
                            ❗ {error}
                        </div>
                    )}

                    {/* Video Preview */}
                    <div className="relative bg-black rounded-lg overflow-hidden min-h-[200px]">
                        <video
                            ref={videoRef}
                            autoPlay
                            muted
                            playsInline
                            className={`w-full object-cover aspect-video transition-opacity duration-300 ${isStreamActive ? 'opacity-100' : 'opacity-0'
                                }`}
                            style={{ transform: 'scaleX(-1)' }}
                        />
                        <canvas ref={canvasRef} className="hidden" />
                    </div>

                    {/* Success Message */}
                    {isCaptured && (
                        <div className="p-3 bg-green-50 border border-green-200 rounded text-sm text-green-800">
                            ✅ Foto berhasil diambil!
                        </div>
                    )}

                    {/* Hint if no camera */}
                    {!isStreamActive && !permissionDenied && !isCaptured && (
                        <div className="text-center text-sm text-gray-500">
                            Klik “Buka Kamera” untuk mulai mengambil gambar.
                        </div>
                    )}
                </div>
            </CardContent>
        </Card>
    );
}


// src/components/footer.tsx
/* eslint-disable */

import React from 'react';
import {
    Heart,
    Github,
    Linkedin,
    Mail,
    MapPin,
    Code,
    Palette,
    Database,
    Globe,
    Smartphone,
    Zap
} from 'lucide-react';
import {
    HoverCard,
    HoverCardContent,
    HoverCardTrigger,
} from "@/components/ui/hover-card";

// Define Technology interface
interface Technology {
    name: string;
    icon: string;
    category: string;
    description: string;
    color: string;
    textColor: string;
}

// Technology data with icons and descriptions
const technologies: Technology[] = [
    {
        name: "Next.js",
        icon: "⚡",
        category: "Frontend Framework",
        description: "React framework untuk production dengan SSR, SSG, dan optimasi performa otomatis.",
        color: "from-black to-gray-800",
        textColor: "text-white"
    },
    {
        name: "React",
        icon: "⚛️",
        category: "Library",
        description: "Library JavaScript untuk membangun user interface yang interaktif dan reusable.",
        color: "from-blue-400 to-blue-600",
        textColor: "text-white"
    },
    {
        name: "TypeScript",
        icon: "📘",
        category: "Language",
        description: "Superset JavaScript dengan static typing untuk development yang lebih aman.",
        color: "from-blue-500 to-blue-700",
        textColor: "text-white"
    },
    {
        name: "Tailwind CSS",
        icon: "🎨",
        category: "CSS Framework",
        description: "Utility-first CSS framework untuk rapid UI development dengan design system.",
        color: "from-cyan-400 to-blue-500",
        textColor: "text-white"
    },
    {
        name: "shadcn/ui",
        icon: "🔧",
        category: "UI Components",
        description: "Beautiful and accessible React components built with Radix UI and Tailwind.",
        color: "from-gray-800 to-black",
        textColor: "text-white"
    },
    {
        name: "Leaflet",
        icon: "🗺️",
        category: "Mapping",
        description: "Open-source JavaScript library untuk interactive maps dengan mobile support.",
        color: "from-green-500 to-green-600",
        textColor: "text-white"
    },
    {
        name: "Prisma",
        icon: "🔷",
        category: "Database ORM",
        description: "Modern database toolkit dengan type-safe client dan intuitive data modeling.",
        color: "from-indigo-500 to-purple-600",
        textColor: "text-white"
    },
    {
        name: "Zod",
        icon: "✅",
        category: "Validation",
        description: "TypeScript-first schema validation dengan static type inference.",
        color: "from-purple-500 to-pink-500",
        textColor: "text-white"
    }
];

// Define props interface for TechCard
interface TechCardProps {
    tech: Technology;
}

const TechCard: React.FC<TechCardProps> = ({ tech }) => (
    <HoverCard>
        <HoverCardTrigger asChild>
            <div className="group cursor-pointer">
                <div className="relative overflow-hidden rounded-2xl p-4 transition-all duration-300 hover:scale-105 hover:-translate-y-1">
                    {/* Gradient Background */}
                    <div className={`absolute inset-0 bg-gradient-to-br ${tech.color} opacity-90 transition-opacity group-hover:opacity-100`} />

                    {/* Glass Effect */}
                    <div className="absolute inset-0 bg-white/10 backdrop-blur-sm rounded-2xl" />

                    {/* Content */}
                    <div className="relative z-10 text-center">
                        <div className="text-3xl mb-2 transform transition-transform group-hover:scale-110">
                            {tech.icon}
                        </div>
                        <h3 className={`font-semibold text-sm ${tech.textColor} transition-colors`}>
                            {tech.name}
                        </h3>
                        <p className={`text-xs ${tech.textColor} opacity-80 mt-1`}>
                            {tech.category}
                        </p>
                    </div>

                    {/* Shine Effect */}
                    <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-700" />
                </div>
            </div>
        </HoverCardTrigger>

        <HoverCardContent className="w-80 p-4 bg-white/95 backdrop-blur-sm border border-gray-200/50 shadow-2xl">
            <div className="space-y-3">
                <div className="flex items-center gap-3">
                    <div className="text-2xl">{tech.icon}</div>
                    <div>
                        <h4 className="font-bold text-gray-900">{tech.name}</h4>
                        <p className="text-sm text-blue-600 font-medium">{tech.category}</p>
                    </div>
                </div>
                <p className="text-sm text-gray-700 leading-relaxed">
                    {tech.description}
                </p>
            </div>
        </HoverCardContent>
    </HoverCard>
);

export default function ModernFooter() {
    return (
        <footer className="relative overflow-hidden bg-gradient-to-b from-gray-50 to-white">
            {/* Background Pattern */}
            <div className="absolute inset-0 opacity-5">
                <div className="absolute inset-0" style={{
                    backgroundImage: `url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23000000' fill-opacity='0.1'%3E%3Ccircle cx='30' cy='30' r='2'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")`
                }} />
            </div>

            <div className="relative z-10 max-w-7xl mx-auto px-6 py-16">
                {/* Tech Stack Section */}
                <div className="text-center mb-16">
                    <div className="inline-flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-blue-500/10 to-purple-500/10 rounded-full mb-6">
                        <Code className="w-5 h-5 text-blue-600" />
                        <span className="text-sm font-semibold text-gray-700">Technology Stack</span>
                    </div>

                    <h2 className="text-3xl font-bold text-gray-900 mb-4">
                        Built with Modern Technologies
                    </h2>
                    <p className="text-gray-600 max-w-2xl mx-auto mb-12">
                        Aplikasi ini dibangun menggunakan teknologi terdepan untuk memberikan pengalaman pengguna yang optimal, performa tinggi, dan maintainability yang baik.
                    </p>

                    {/* Tech Grid */}
                    <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-6 mb-12">
                        {technologies.map((tech, index) => (
                            <TechCard key={tech.name} tech={tech} />
                        ))}
                    </div>
                </div>

                {/* Divider */}
                <div className="border-t border-gray-200 mb-12" />

                {/* Footer Content */}
                <div className="grid md:grid-cols-3 gap-8 mb-12">
                    {/* About Section */}
                    <div className="space-y-4">
                        <div className="flex items-center gap-2">
                            <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                                <MapPin className="w-4 h-4 text-white" />
                            </div>
                            <h3 className="font-bold text-gray-900">Stories App</h3>
                        </div>
                        <p className="text-gray-600 text-sm leading-relaxed">
                            Platform berbagi cerita dengan lokasi geografis. Bagikan momen berharga Anda dengan dunia melalui stories yang interaktif dan menarik.
                        </p>
                        <div className="flex items-center gap-2 text-sm text-gray-500">
                            <Globe className="w-4 h-4" />
                            <span>Jakarta, Indonesia</span>
                        </div>
                    </div>

                    {/* Features */}
                    <div className="space-y-4">
                        <h3 className="font-bold text-gray-900 flex items-center gap-2">
                            <Zap className="w-5 h-5 text-yellow-500" />
                            Features
                        </h3>
                        <ul className="space-y-2 text-sm text-gray-600">
                            <li className="flex items-center gap-2">
                                <div className="w-1.5 h-1.5 bg-blue-500 rounded-full" />
                                Interactive Maps Integration
                            </li>
                            <li className="flex items-center gap-2">
                                <div className="w-1.5 h-1.5 bg-green-500 rounded-full" />
                                Real-time Story Sharing
                            </li>
                            <li className="flex items-center gap-2">
                                <div className="w-1.5 h-1.5 bg-purple-500 rounded-full" />
                                Location-based Stories
                            </li>
                            <li className="flex items-center gap-2">
                                <div className="w-1.5 h-1.5 bg-pink-500 rounded-full" />
                                Responsive Design
                            </li>
                        </ul>
                    </div>

                    {/* Connect */}
                    <div className="space-y-4">
                        <h3 className="font-bold text-gray-900 flex items-center gap-2">
                            <Heart className="w-5 h-5 text-red-500" />
                            Connect
                        </h3>
                        <div className="space-y-3">
                            <a
                                href="https://github.com"
                                className="flex items-center gap-3 text-sm text-gray-600 hover:text-gray-900 transition-colors group"
                            >
                                <div className="w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center group-hover:bg-gray-900 transition-colors">
                                    <Github className="w-4 h-4 group-hover:text-white" />
                                </div>
                                <span>GitHub Repository</span>
                            </a>

                            <a
                                href="https://linkedin.com"
                                className="flex items-center gap-3 text-sm text-gray-600 hover:text-blue-600 transition-colors group"
                            >
                                <div className="w-8 h-8 bg-blue-50 rounded-lg flex items-center justify-center group-hover:bg-blue-600 transition-colors">
                                    <Linkedin className="w-4 h-4 group-hover:text-white text-blue-600" />
                                </div>
                                <span>LinkedIn Profile</span>
                            </a>

                            <a
                                href="mailto:contact@example.com"
                                className="flex items-center gap-3 text-sm text-gray-600 hover:text-green-600 transition-colors group"
                            >
                                <div className="w-8 h-8 bg-green-50 rounded-lg flex items-center justify-center group-hover:bg-green-600 transition-colors">
                                    <Mail className="w-4 h-4 group-hover:text-white text-green-600" />
                                </div>
                                <span>Email Contact</span>
                            </a>
                        </div>
                    </div>
                </div>

                {/* Bottom Bar */}
                <div className="border-t border-gray-200 pt-8">
                    <div className="flex flex-col md:flex-row items-center justify-between gap-4">
                        <p className="text-sm text-gray-500">
                            © 2024 Stories App. Built with <Heart className="w-4 h-4 inline text-red-500" /> and modern web technologies.
                        </p>

                        <div className="flex items-center gap-4 text-sm text-gray-500">
                            <span className="flex items-center gap-1">
                                <Smartphone className="w-4 h-4" />
                                Mobile Friendly
                            </span>
                            <span className="flex items-center gap-1">
                                <Palette className="w-4 h-4" />
                                Modern UI/UX
                            </span>
                            <span className="flex items-center gap-1">
                                <Database className="w-4 h-4" />
                                Secure & Fast
                            </span>
                        </div>
                    </div>
                </div>
            </div>

            {/* Floating Elements */}
            <div className="absolute top-10 left-10 w-20 h-20 bg-gradient-to-br from-blue-400/10 to-purple-400/10 rounded-full blur-xl" />
            <div className="absolute bottom-10 right-10 w-32 h-32 bg-gradient-to-br from-pink-400/10 to-orange-400/10 rounded-full blur-xl" />
        </footer>
    );
}

// src/components/header.tsx
/* eslint-disable */
'use client';
import React from 'react';
import { useState, useEffect } from 'react';
import Link from 'next/link';
import { usePathname, useRouter } from 'next/navigation';
import { isLoggedIn, clearToken } from '../app/lib/token'
import { useUser } from '../utils/StoryContext';

export default function Header() {
    const [drawerOpen, setDrawerOpen] = useState(false);
    const pathname = usePathname();
    const [scrolled, setScrolled] = useState(false);
    const { user, logout, loading } = useUser();
    const [mounted, setMounted] = useState(false);

    const closeDrawer = () => {
        setDrawerOpen(false);
    };

    useEffect(() => {
        setMounted(true);
    }, []);

    useEffect(() => {
        // Auto-close drawer saat navigasi
        setDrawerOpen(false);
    }, [pathname]);

    useEffect(() => {
        const handleScroll = () => {
            const offset = window.scrollY;
            setScrolled(offset > 50);
        };

        window.addEventListener('scroll', handleScroll);
        return () => window.removeEventListener('scroll', handleScroll);
    }, []);

    // Fungsi untuk menangani klik pada overlay
    const handleOverlayClick = (e: React.MouseEvent<HTMLDivElement>) => {
        if (e.target === e.currentTarget) {
            closeDrawer();
        }
    };


    return (
        <>
            <header className="fixed top-0 left-0 right-0 z-50 transition-all duration-300">
                {/* Background dengan backdrop blur dan gradient */}
                <div className="absolute inset-0 bg-gradient-to-r from-black/20 via-black/10 to-black/20 backdrop-blur-md border-b border-white/10"></div>

                <div className="relative main-header flex items-center justify-between p-4 text-white">
                    <Link href="/" className="brand-name text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-white to-gray-200 hover:from-blue-300 hover:to-purple-400 transition-all duration-300 drop-shadow-lg">
                        STORIES
                    </Link>

                    {/* Right Section - User + Menu */}
                    <div className="flex items-center space-x-4">
                        {/* User Section */}
                        {user ? (
                            <div className="relative group">
                                {/* User Avatar */}
                                <div className="w-10 h-10 bg-gradient-to-br from-purple-500 via-blue-500 to-indigo-600 rounded-full flex items-center justify-center shadow-lg border-2 border-white/20 backdrop-blur-sm transition-all duration-300 hover:scale-105 hover:shadow-xl cursor-pointer">
                                    <span className="text-white font-semibold text-sm uppercase tracking-wide">
                                        {user.username?.charAt(0) || 'U'}
                                    </span>
                                </div>

                                {/* Hover tooltip */}
                                <div className="absolute top-full right-0 mt-2 px-3 py-2 bg-gray-900/95 backdrop-blur-sm text-white text-sm rounded-lg shadow-xl opacity-0 group-hover:opacity-100 transition-all duration-200 pointer-events-none whitespace-nowrap z-50">
                                    <div className="font-medium">{user.username}</div>
                                    {user.email && (
                                        <div className="text-gray-300 text-xs">{user.email}</div>
                                    )}
                                    {/* Small arrow */}
                                    <div className="absolute -top-1 right-3 w-2 h-2 bg-gray-900/95 rotate-45"></div>
                                </div>

                                {/* Online indicator */}
                                <div className="absolute -bottom-0.5 -right-0.5 w-3 h-3 bg-green-400 rounded-full border-2 border-white shadow-sm animate-pulse"></div>
                            </div>
                        ) : (
                            <div className="flex items-center space-x-2 text-white/70 hover:text-white/90 transition-colors duration-200">
                                <div className="w-8 h-8 border-2 border-white/30 rounded-full flex items-center justify-center">
                                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                    </svg>
                                </div>
                                <span className="text-sm font-medium hidden sm:block">Guest</span>
                            </div>
                        )}

                        {/* Menu Button */}
                        <button
                            onClick={() => setDrawerOpen(!drawerOpen)}
                            className="drawer-button flex flex-col items-center justify-center w-12 h-12 bg-white/10 hover:bg-white/20 backdrop-blur-sm rounded-xl transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-white/30 focus:ring-opacity-50 relative z-[60] border border-white/20 shadow-lg"
                            aria-label="Toggle menu"
                        >
                            <div className={`w-6 h-0.5 bg-white drop-shadow-sm transition-all duration-300 ${drawerOpen ? 'rotate-45 translate-y-1.5' : ''}`}></div>
                            <div className={`w-6 h-0.5 bg-white drop-shadow-sm transition-all duration-300 mt-1.5 ${drawerOpen ? 'opacity-0' : ''}`}></div>
                            <div className={`w-6 h-0.5 bg-white drop-shadow-sm transition-all duration-300 mt-1.5 ${drawerOpen ? '-rotate-45 -translate-y-1.5' : ''}`}></div>
                        </button>
                    </div>
                </div>

            </header>

            {/* Overlay dengan blur effect */}
            {drawerOpen && (
                <div
                    className="fixed inset-0 bg-black/50 backdrop-blur-sm z-[45] transition-all duration-300"
                    onClick={handleOverlayClick}
                />
            )}

            {/* Drawer dengan glass effect */}
            <div className={`fixed top-0 right-0 h-full w-80 bg-white/95 backdrop-blur-xl shadow-2xl transform transition-transform duration-300 ease-in-out z-[55] border-l border-white/20 ${drawerOpen ? 'translate-x-0' : 'translate-x-full'}`}>
                <div className="flex flex-col h-full">
                    {/* Header Drawer dengan glass effect */}
                    <div className="flex items-center justify-between p-6 bg-gradient-to-r from-gray-900/90 to-gray-800/90 backdrop-blur-md text-white border-b border-white/10">
                        <h2 className="text-xl font-bold drop-shadow-sm">Menu</h2>
                        <button
                            onClick={closeDrawer}
                            className="p-2 rounded-xl hover:bg-white/10 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-white/20 z-[60] border border-white/10"
                            aria-label="Close menu"
                        >
                            <svg className="w-6 h-6 drop-shadow-sm" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>

                    {/* Navigation Content dengan glass effect */}
                    <nav className="flex-1 p-6 bg-white/80 backdrop-blur-sm">
                        <ul className="space-y-4">
                            <li>
                                <Link
                                    href="/"
                                    className={`flex items-center p-4 rounded-xl transition-all duration-200 backdrop-blur-sm border ${pathname === '/'
                                        ? 'bg-blue-100/80 text-blue-600 border-l-4 border-blue-600 shadow-md border-blue-200/50'
                                        : 'text-gray-700 hover:bg-white/60 hover:text-blue-600 hover:shadow-md border-white/20'
                                        }`}
                                    onClick={closeDrawer}
                                >
                                    <svg className="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                                    </svg>
                                    Beranda
                                </Link>
                            </li>
                            <li>
                                <Link
                                    href="/stories"
                                    className={`flex items-center p-4 rounded-xl transition-all duration-200 backdrop-blur-sm border ${pathname === '/stories'
                                        ? 'bg-blue-100/80 text-blue-600 border-l-4 border-blue-600 shadow-md border-blue-200/50'
                                        : 'text-gray-700 hover:bg-white/60 hover:text-blue-600 hover:shadow-md border-white/20'
                                        }`}
                                    onClick={closeDrawer}
                                >
                                    <svg className="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                                    </svg>
                                    Buat Cerita
                                </Link>
                            </li>
                        </ul>
                    </nav>

                    {/* User Actions dengan glass effect */}
                    <div className="p-6 border-t border-white/20 bg-white/60 backdrop-blur-md">
                        {mounted && user  && isLoggedIn() ? (
                            <div className="space-y-3">
                                <div className="flex items-center p-4 bg-white/40 backdrop-blur-sm rounded-xl border border-white/30 shadow-sm">
                                    <svg className="w-8 h-8 text-gray-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                    </svg>
                                    <div>
                                        <p className="text-sm font-medium text-gray-700">Selamat datang!</p>
                                        <p className="text-xs text-gray-500">{user.username}</p>
                                    </div>
                                </div>
                                <button
                                    onClick={() => {
                                        logout();
                                    }}
                                    className="w-full flex items-center justify-center p-4 bg-red-500/90 hover:bg-red-600/90 text-white rounded-xl transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-red-400 focus:ring-opacity-50 backdrop-blur-sm border border-red-400/20 shadow-md"
                                >
                                    <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                                    </svg>
                                    Logout
                                </button>
                            </div>
                        ) : (
                            <div className="space-y-3">
                                <Link
                                    href="/login"
                                    className="w-full flex items-center justify-center p-4 bg-red-500/80 hover:bg-red-600/90 text-white rounded-xl transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-red-400 focus:ring-opacity-50 backdrop-blur-sm border border-red-400/20 shadow-md"
                                    onClick={() => {
                                        logout();
                                        closeDrawer();
                                    }}
                                >
                                    Logout
                                </Link>
                            </div>
                        )}
                    </div>
                </div>
            </div>
        </>
    );
}


// src/components/hero.tsx
'use client';
import React, { useState, useEffect } from 'react';
import Link from 'next/link';

interface HeroProps {
    theme?: 'fantasy' | 'adventure' | 'mystery' | 'romance' | 'scifi';
    customTitle?: string;
    customSubtitle?: string;
    customBackground?: string;
}

const Hero: React.FC<HeroProps> = ({
    theme = 'fantasy',
    customTitle,
    customSubtitle,
    customBackground
}) => {
    const [currentTheme, setCurrentTheme] = useState(0);
    const [isVisible, setIsVisible] = useState(false);
    const [isMounted, setIsMounted] = useState(false);

    // Berbagai tema cerita dengan background dan text
    const themes = {
        fantasy: {
            background: "https://images.unsplash.com/photo-1518709268805-4e9042af2176?ixlib=rb-4.0.3&auto=format&fit=crop&w=2070&q=80",
            title: "Masuki Dunia Fantasi",
            subtitle: "Temukan keajaiban dalam setiap halaman cerita yang menakjubkan",
            accent: "from-purple-600 to-pink-600",
            textShadow: "text-shadow-purple"
        },
        adventure: {
            background: "https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=2070&q=80",
            title: "Petualangan Tak Terbatas Menanti",
            subtitle: "Jelajahi dunia penuh misteri dan tantangan yang mendebarkan",
            accent: "from-orange-600 to-red-600",
            textShadow: "text-shadow-orange"
        },
        mystery: {
            background: "https://images.unsplash.com/photo-1419242902214-272b3f66ee7a?ixlib=rb-4.0.3&auto=format&fit=crop&w=2070&q=80",
            title: "Pecahkan Misteri Terdalam",
            subtitle: "Setiap kata menyimpan petunjuk, setiap bab membuka rahasia baru",
            accent: "from-indigo-600 to-purple-800",
            textShadow: "text-shadow-indigo"
        },
        romance: {
            background: "https://images.unsplash.com/photo-1502920917128-1aa500764cbd?ixlib=rb-4.0.3&auto=format&fit=crop&w=2070&q=80",
            title: "Kisah Cinta Yang Abadi",
            subtitle: "Rasakan kehangatan dan keindahan cerita cinta yang menyentuh hati",
            accent: "from-pink-500 to-rose-600",
            textShadow: "text-shadow-pink"
        },
        scifi: {
            background: "https://images.unsplash.com/photo-1446776653964-20c1d3a81b06?ixlib=rb-4.0.3&auto=format&fit=crop&w=2070&q=80",
            title: "Masa Depan Dalam Genggaman",
            subtitle: "Jelajahi teknologi canggih dan peradaban masa depan yang menakjubkan",
            accent: "from-cyan-500 to-blue-600",
            textShadow: "text-shadow-cyan"
        }
    };

    // Predefined particles positions untuk menghindari Math.random() di render
    const particlesData = [
        { left: 10, top: 20, delay: 0, duration: 8 },
        { left: 85, top: 15, delay: 1, duration: 9 },
        { left: 25, top: 80, delay: 2, duration: 10 },
        { left: 70, top: 60, delay: 3, duration: 8.5 },
        { left: 45, top: 30, delay: 4, duration: 9.5 },
        { left: 90, top: 75, delay: 5, duration: 8.2 },
        { left: 15, top: 50, delay: 6, duration: 9.8 },
        { left: 55, top: 10, delay: 7, duration: 8.7 },
        { left: 35, top: 90, delay: 0.5, duration: 9.2 },
        { left: 75, top: 25, delay: 1.5, duration: 8.8 },
        { left: 5, top: 70, delay: 2.5, duration: 9.3 },
        { left: 95, top: 45, delay: 3.5, duration: 8.4 },
        { left: 60, top: 85, delay: 4.5, duration: 9.7 },
        { left: 20, top: 35, delay: 5.5, duration: 8.6 },
        { left: 80, top: 5, delay: 6.5, duration: 9.1 },
        { left: 40, top: 65, delay: 7.5, duration: 8.9 },
        { left: 65, top: 40, delay: 1.2, duration: 9.4 },
        { left: 30, top: 75, delay: 2.8, duration: 8.3 },
        { left: 85, top: 55, delay: 4.2, duration: 9.6 },
        { left: 50, top: 20, delay: 6.8, duration: 8.1 }
    ];

    const themeKeys = Object.keys(themes) as (keyof typeof themes)[];

    // Mount effect
    useEffect(() => {
        setIsMounted(true);
        setIsVisible(true);
    }, []);

    // Auto slide themes - hanya jalan setelah mounted
    useEffect(() => {
        if (!isMounted) return;

        const interval = setInterval(() => {
            setCurrentTheme((prev) => (prev + 1) % themeKeys.length);
        }, 8000);

        return () => clearInterval(interval);
    }, [isMounted, themeKeys.length]);

    // Gunakan custom atau theme yang dipilih
    const currentThemeData = customBackground ? {
        background: customBackground,
        title: customTitle || themes[theme].title,
        subtitle: customSubtitle || themes[theme].subtitle,
        accent: themes[theme].accent,
        textShadow: themes[theme].textShadow
    } : themes[themeKeys[currentTheme]];

    // Render nothing sampai component mounted untuk menghindari hydration mismatch
    if (!isMounted) {
        return (
            <section className="relative h-screen w-full overflow-hidden bg-gray-900">
                <div className="absolute inset-0 bg-gradient-to-br from-black/60 via-black/40 to-black/60" />
                <div className="relative z-10 flex items-center justify-center h-full px-4">
                    <div className="text-center max-w-4xl mx-auto">
                        <h1 className="text-4xl sm:text-6xl font-bold text-white mb-6">
                            <span className="bg-gradient-to-r from-blue-400 to-purple-600 bg-clip-text text-transparent">
                                {customTitle || themes[theme].title}
                            </span>
                        </h1>
                        <p className="text-xl text-gray-200 mb-8">
                            {customSubtitle || themes[theme].subtitle}
                        </p>
                    </div>
                </div>
            </section>
        );
    }

    return (
        <section className="relative h-screen w-full overflow-hidden">
            {/* Background Image dengan Parallax Effect */}
            <div
                className="absolute inset-0 bg-cover bg-center bg-fixed transition-all duration-1000 ease-in-out transform scale-105"
                style={{
                    backgroundImage: `url(${currentThemeData.background})`,
                    filter: 'brightness(0.7)'
                }}
            />

            {/* Gradient Overlay untuk readability */}
            <div className="absolute inset-0 bg-gradient-to-br from-black/60 via-black/40 to-black/60" />

            {/* Floating Particles Effect - menggunakan data predefined */}
            <div className="absolute inset-0">
                {particlesData.map((particle, i) => (
                    <div
                        key={i}
                        className="absolute w-2 h-2 bg-white/20 rounded-full animate-float"
                        style={{
                            left: `${particle.left}%`,
                            top: `${particle.top}%`,
                            animationDelay: `${particle.delay}s`,
                            animationDuration: `${particle.duration}s`
                        }}
                    />
                ))}
            </div>

            {/* Main Content */}
            <div className="relative z-10 flex items-center justify-center h-full px-4 sm:px-6 lg:px-8">
                <div className={`text-center max-w-4xl mx-auto transition-all duration-1000 transform ${isVisible ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'
                    }`}>

                    {/* Main Title */}
                    <h1 className="text-4xl sm:text-5xl md:text-6xl lg:text-7xl font-bold text-white mb-6 leading-tight">
                        <span className={`bg-gradient-to-r ${currentThemeData.accent} bg-clip-text text-transparent animate-pulse`}>
                            {currentThemeData.title}
                        </span>
                    </h1>

                    {/* Subtitle */}
                    <p className="text-xl sm:text-2xl md:text-3xl text-gray-200 mb-8 font-light leading-relaxed max-w-3xl mx-auto">
                        {currentThemeData.subtitle}
                    </p>

                    {/* Decorative Line */}
                    <div className="flex items-center justify-center mb-8">
                        <div className="h-0.5 w-12 bg-white/30"></div>
                        <div className="h-1 w-8 bg-gradient-to-r from-white/60 to-white/30 mx-2"></div>
                        <div className="h-0.5 w-12 bg-white/30"></div>
                    </div>

                    {/* Call to Action Buttons */}
                    <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
                        <Link
                            href="/stories"
                            className={`group px-8 py-4 bg-gradient-to-r ${currentThemeData.accent} text-white rounded-full font-semibold text-lg transform hover:scale-105 transition-all duration-300 shadow-2xl hover:shadow-3xl border border-white/20`}
                        >
                            <span className="flex items-center">
                                Mulai Membaca
                                <svg className="ml-2 w-5 h-5 group-hover:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7l5 5m0 0l-5 5m5-5H6" />
                                </svg>
                            </span>
                        </Link>

                        <Link
                            href="/stories"
                            className="group px-8 py-4 bg-white/10 backdrop-blur-sm text-white rounded-full font-semibold text-lg transform hover:scale-105 transition-all duration-300 border border-white/30 hover:bg-white/20"
                        >
                            <span className="flex items-center">
                                Tulis Cerita
                                <svg className="ml-2 w-5 h-5 group-hover:rotate-12 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                                </svg>
                            </span>
                        </Link>
                    </div>

                    {/* Theme Indicators */}
                    <div className="flex justify-center mt-12 space-x-2">
                        {themeKeys.map((_, index) => (

                            <button
                                aria-label="Go to slide theme"
                                key={index}
                                onClick={() => setCurrentTheme(index)}
                                className={`w-3 h-3 rounded-full transition-all duration-300 ${index === currentTheme
                                    ? 'bg-white scale-125'
                                    : 'bg-white/40 hover:bg-white/60'
                                    }`}
                            />
                        ))}
                    </div>
                </div>
            </div>

            {/* Scroll Indicator */}
            <div className="absolute bottom-8 left-1/2 transform -translate-x-1/2">
                <div className="flex flex-col items-center text-white/70 animate-bounce">
                    <span className="text-sm mb-2">Scroll untuk lanjut</span>
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 14l-7 7m0 0l-7-7m7 7V3" />
                    </svg>
                </div>
            </div>
        </section>
    );
};

export default Hero;


// src/components/homeContent.tsx
/* eslint-disable */
'use client';

import { useAuthRedirect } from '../hooks/useAuthRedirect';
import { useStories } from '../utils/StoryContext';
import { useState, useEffect } from 'react';
import Hero from './hero';
import MapSection from './MapSection';
import StoriesList from './StoriesList';
import ModernFooter from '../components/footer';

async function getAddressFromCoordinates(
    lat: number,
    lon: number,
    setAddressCache: React.Dispatch<React.SetStateAction<Record<string, string>>>
) {
    const cacheKey = `${lat},${lon}`;
    try {
        const res = await fetch(`/api/geocode/reverse?lat=${lat}&lon=${lon}`);
        const data = await res.json();
        if (data.address) {
            setAddressCache(prev => ({ ...prev, [cacheKey]: data.address }));
        }
    } catch (err) {
        console.error('Gagal mendapatkan alamat:', err);
    }
}

export default function HomeContent() {
    useAuthRedirect();
    const { stories, loading } = useStories();
    const [isOnline, setIsOnline] = useState(true);
    const [addressCache, setAddressCache] = useState<Record<string, string>>({});

    // Handle online/offline status
    useEffect(() => {
        setIsOnline(typeof navigator !== 'undefined' && navigator.onLine);

        const handleOnline = () => setIsOnline(true);
        const handleOffline = () => setIsOnline(false);

        window.addEventListener('online', handleOnline);
        window.addEventListener('offline', handleOffline);

        return () => {
            window.removeEventListener('online', handleOnline);
            window.removeEventListener('offline', handleOffline);
        };
    }, []);

    // Load addresses for stories
    useEffect(() => {
        const loadAddresses = async () => {
            if (stories.length > 0) {
                await Promise.all(
                    stories.map(async (story) => {
                        if (story.latitude && story.longitude) {
                            const cacheKey = `${story.latitude},${story.longitude}`;
                            if (!addressCache[cacheKey]) {
                                await getAddressFromCoordinates(
                                    story.latitude,
                                    story.longitude,
                                    setAddressCache
                                );
                            }
                        }
                    })
                );
            }
        };

        loadAddresses();
    }, [stories]);

    return (
        <main>
            <Hero />
            <section className="relative p-4 h-full overflow-hidden">
                {/* Background Image with Blur Effect */}
                <div
                    className="absolute inset-0 z-0 bg-center bg-no-repeat blur-xs scale-110"
                    style={{
                        backgroundImage: `url('/freepik__upload__76156.png')`
                    }}
                />
                {/* Gradient Overlay */}
                <div className="absolute inset-0 z-10 bg-gradient-to-b from-black/10 via-black/10 to-black/20" />
                <div className="absolute inset-0 z-15 backdrop-blur-xs bg-black/10" />

                {/* Content */}
                <div className="relative z-20 h-full flex flex-col">
                    <div className="flex-shrink-0">
                        <MapSection
                            stories={stories}
                            isOnline={isOnline}
                            addressCache={addressCache}
                        />
                    </div>
                    <div className="flex-1 min-h-0">
                        <StoriesList />
                    </div>
                </div>
            </section>
            <ModernFooter />
        </main>
    );
}


// src/components/LocationPicker.tsx
/* eslint-disable */

'use client';

import { useEffect, useRef, useState, useCallback } from 'react';
import dynamic from 'next/dynamic';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import type { Map as LeafletMap, Marker as LeafletMarker } from 'leaflet';

interface LocationData {
    lat: number;
    lng: number;
    address?: string;
}

interface LocationPickerProps {
    onLocationSelect: (location: LocationData) => void;
    initialLocation?: LocationData | null;
}

// Dynamic imports untuk leaflet components
const MapContainer = dynamic(() => import('react-leaflet').then(m => m.MapContainer), { ssr: false });
const TileLayer = dynamic(() => import('react-leaflet').then(m => m.TileLayer), { ssr: false });

export default function LocationPicker({ onLocationSelect, initialLocation }: LocationPickerProps) {
    const mapRef = useRef<LeafletMap | null>(null);
    const markerRef = useRef<LeafletMarker | null>(null);
    const [L, setL] = useState<typeof import('leaflet') | null>(null);
    const [isMapReady, setIsMapReady] = useState(false);
    const [currentLocation, setCurrentLocation] = useState<LocationData | null>(initialLocation || null);
    const [isGettingLocation, setIsGettingLocation] = useState(false);
    const [mapExpanded, setMapExpanded] = useState(false);

    // Load leaflet library
    useEffect(() => {
        import('leaflet').then((leaflet) => {
            setL(leaflet);
            setIsMapReady(true);
        });
    }, []);

    // Initialize marker saat map dan L sudah ready
    useEffect(() => {
        if (!mapRef.current || !L || !isMapReady) return;

        const map = mapRef.current;

        // Default location (Jakarta)
        const defaultLat = currentLocation?.lat || -6.200000;
        const defaultLng = currentLocation?.lng || 106.816666;

        // Create or update marker
        if (markerRef.current) {
            markerRef.current.remove();
        }

        markerRef.current = L.marker([defaultLat, defaultLng], { draggable: true })
            .addTo(map)
            .bindPopup('Drag untuk memilih lokasi')
            .openPopup();

        // Handle marker drag
        markerRef.current.on('dragend', () => {
            if (!markerRef.current) return;
            const { lat, lng } = markerRef.current.getLatLng();
            const locationData = { lat: Number(lat.toFixed(6)), lng: Number(lng.toFixed(6)) };
            setCurrentLocation(locationData);
            onLocationSelect(locationData);
            reverseGeocode(lat, lng);
        });

        // Handle map click
        map.on('click', (e) => {
            const { lat, lng } = e.latlng;
            if (markerRef.current) {
                markerRef.current.setLatLng([lat, lng]);
            }
            const locationData = { lat: Number(lat.toFixed(6)), lng: Number(lng.toFixed(6)) };
            setCurrentLocation(locationData);
            onLocationSelect(locationData);
            reverseGeocode(lat, lng);
        });

        // Set initial view
        map.setView([defaultLat, defaultLng], 13);

    }, [L, isMapReady, onLocationSelect]);

    // Reverse geocoding untuk mendapatkan alamat
    const reverseGeocode = async (lat: number, lng: number) => {
        try {
            const response = await fetch(`/api/geocode/reverse?lat=${lat}&lon=${lng}`);
            const data = await response.json();

            if (data.address) {
                const locationWithAddress = {
                    lat: Number(lat.toFixed(6)),
                    lng: Number(lng.toFixed(6)),
                    address: data.address,
                };
                setCurrentLocation(locationWithAddress);
                onLocationSelect(locationWithAddress);
            }
        } catch (error) {
            console.error('Error getting address:', error);
        }
    };
    ;

    // Get current location menggunakan browser geolocation
    const getCurrentLocation = () => {
        setIsGettingLocation(true);

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    const { latitude, longitude } = position.coords;
                    const locationData = {
                        lat: Number(latitude.toFixed(6)),
                        lng: Number(longitude.toFixed(6))
                    };

                    setCurrentLocation(locationData);
                    onLocationSelect(locationData);

                    // Update map view dan marker
                    if (mapRef.current && markerRef.current) {
                        mapRef.current.setView([latitude, longitude], 15);
                        markerRef.current.setLatLng([latitude, longitude]);
                        reverseGeocode(latitude, longitude);
                    }

                    setIsGettingLocation(false);
                },
                (error) => {
                    console.error('Error getting location:', error);
                    alert('Tidak dapat mengakses lokasi. Pastikan Anda mengizinkan akses lokasi.');
                    setIsGettingLocation(false);
                }
            );
        } else {
            alert('Browser Anda tidak mendukung geolocation.');
            setIsGettingLocation(false);
        }
    };

    const setMapRef = useCallback((ref: LeafletMap | null) => {
        mapRef.current = ref;
    }, []);

    return (
        <Card>
            <CardContent className="p-4">
                <div className="space-y-4">
                    {/* Controls */}
                    <div className="flex gap-2 flex-wrap">
                        <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={getCurrentLocation}
                            disabled={isGettingLocation}
                        >
                            {isGettingLocation ? '📍 Mencari...' : '📍 Lokasi Saya'}
                        </Button>

                        <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={() => setMapExpanded(!mapExpanded)}
                        >
                            {mapExpanded ? '📐 Perkecil' : '🗺️ Perbesar'}
                        </Button>
                    </div>

                    {/* Location Info */}
                    {currentLocation && (
                        <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
                            <div className="text-sm font-medium text-blue-800">
                                📍 Lokasi: {currentLocation.lat}, {currentLocation.lng}
                            </div>
                            {currentLocation.address && (
                                <div className="text-xs text-blue-600 mt-1">
                                    {currentLocation.address}
                                </div>
                            )}
                        </div>
                    )}

                    {/* Map Container */}
                    <div className={`rounded-lg overflow-hidden border ${mapExpanded ? 'h-96' : 'h-64'}`}>
                        {isMapReady ? (
                            <MapContainer
                                center={[currentLocation?.lat || -6.200000, currentLocation?.lng || 106.816666]}
                                zoom={13}
                                style={{ height: '100%', width: '100%' }}
                                ref={setMapRef}
                            >
                                <TileLayer
                                    url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                                    attribution='&copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a>'
                                />
                            </MapContainer>
                        ) : (
                            <div className="flex items-center justify-center h-full bg-gray-100">
                                <p className="text-gray-500">Loading map...</p>
                            </div>
                        )}
                    </div>

                    <p className="text-xs text-gray-500">
                        💡 Klik pada peta atau drag marker untuk memilih lokasi
                    </p>
                </div>
            </CardContent>
        </Card>
    );
}


// src/components/MapSection.tsx
'use client';

import dynamic from 'next/dynamic';
import { useEffect, useRef, useCallback, useState } from 'react';
import type { Map as LeafletMap, Marker as LeafletMarker } from 'leaflet';

interface Story {
    id: string;
    title?: string;
    content?: string;
    imageUrl?: string;
    createdAt: string | Date;
    latitude: number;
    longitude: number;
}

interface MapSectionProps {
    stories: Story[];
    isOnline: boolean;
    addressCache: Record<string, string>;
}

// Komponen peta dari react-leaflet (harus ssr: false)
const MapContainer = dynamic(() => import('react-leaflet').then(m => m.MapContainer), { ssr: false });
const TileLayer = dynamic(() => import('react-leaflet').then(m => m.TileLayer), { ssr: false });

export default function MapSection({ stories, isOnline }: MapSectionProps) {
    const mapRef = useRef<LeafletMap | null>(null);
    const markersRef = useRef<LeafletMarker[]>([]);
    const [L, setL] = useState<typeof import('leaflet') | null>(null);

    // Load leaflet hanya saat di browser
    useEffect(() => {
        import('leaflet').then(setL);
    }, []);

    // Render markers ke map
    const renderMarkers = useCallback(() => {
        if (!mapRef.current || !L) return;

        const map = mapRef.current;
        // Bersihkan marker lama
        markersRef.current.forEach(m => m.remove());
        markersRef.current = [];

        const bounds = L.latLngBounds([]);

        for (const story of stories) {
            if (story.latitude && story.longitude) {
                const latLng = L.latLng(story.latitude, story.longitude);
                const marker = L.marker(latLng)
                    .addTo(map)
                    .bindPopup(`<strong>${story.title || 'Tanpa Judul'}</strong><br>${story.content || 'Tidak ada deskripsi'}`);

                markersRef.current.push(marker);
                bounds.extend(latLng);
            }
        }

        if (markersRef.current.length) {
            map.fitBounds(bounds);
        }
    }, [L, stories]);

    // Jalankan render marker setiap kali stories/isOnline berubah
    useEffect(() => {
        if (isOnline && stories.length && L && mapRef.current) {
            renderMarkers();
        }
    }, [L, stories, isOnline, renderMarkers]);

    // Handler saat MapContainer mendapatkan ref
    const setMapRef = useCallback((ref: LeafletMap | null) => {
        mapRef.current = ref;
    }, []);

    return (
        <section className="maps-container my-6">
            {isOnline ? (
                <div className='flex justify-center items-center'>
                    <div className="flex h-[500px] w-[1500px] gap-4 rounded-xl overflow-hidden shadow-lg border-2 border-gray-200 relative z-0">
                        <MapContainer
                            center={[-6.2, 106.816]}
                            zoom={10}
                            style={{ height: '100%', width: '100%' }}
                            ref={setMapRef}
                            className="z-0"
                        >
                            <TileLayer
                                url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                                attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
                            />
                        </MapContainer>
                        <section className="absolute top-0 left-0 p-4 bg-white/65 rounded-lg shadow-md z-10">
                            <h2 className="text-2xl font-bold text-gray-800 mt-4">📍 Lokasi Cerita</h2>
                            <p className="text-gray-600">Klik pada marker untuk melihat detail cerita.</p>
                        </section>
                    </div>
                </div>
            ) : (
                <div className="p-6 bg-yellow-100 border border-yellow-300 rounded-xl shadow">
                    <p className="text-yellow-800 font-medium flex items-center gap-2">
                        🌐 Peta tidak tersedia saat offline. Silakan sambungkan ke internet untuk melihat peta.
                    </p>
                </div>
            )}
        </section>
    );
}


// src/components/StoriesList.tsx
'use client';
import * as React from "react"
import Autoplay from "embla-carousel-autoplay"
import StoryCard from './StoryCard';
import { useStories } from '../utils/StoryContext';
import {
    Carousel,
    CarouselContent,
    CarouselItem,
    CarouselNext,
    CarouselPrevious,
} from "@/components/ui/carousel"

export default function StoriesList() {
    const { stories, loading } = useStories();

    const plugin = React.useRef(
        Autoplay({
            delay: 3000,
            stopOnInteraction: true,
            jump: false
        })
    )

    return (
        <section className="stories-title my-10 p-2">
            <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-6 gap-4">
                <h1 className="text-3xl font-bold text-gray-800">📖 Recent Stories</h1>
            </div>

            {loading ? (
                <p className="text-gray-500 italic">Memuat cerita...</p>
            ) : stories.length === 0 ? (
                <p className="text-gray-500 italic">Belum ada cerita.</p>
            ) : (
                <div className="w-full max-w-6xl mx-auto">
                    <Carousel
                        plugins={[plugin.current]}
                        className="w-full"
                        opts={{
                            align: "start",
                            slidesToScroll: 1,
                            containScroll: "trimSnaps",
                            loop: true
                        }}
                        onMouseEnter={plugin.current.stop}
                        onMouseLeave={plugin.current.reset}
                    >
                        <CarouselContent className="-ml-4">
                            {stories.map((story) => (
                                <CarouselItem key={story.id} className="pl-4 basis-full sm:basis-1/2 lg:basis-1/2">
                                    <StoryCard storyId={story.id} />
                                </CarouselItem>
                            ))}
                        </CarouselContent>
                        <CarouselPrevious className="left-2" />
                        <CarouselNext className="right-2" />
                    </Carousel>
                </div>
            )}
        </section>
    );
}



// src/components/StoryCard.tsx
'use client';

import { useEffect, useState } from 'react';
import Image from 'next/image';
import { Trash2 } from 'lucide-react';
import { showFormattedDate } from '../utils/index';
import { useStories } from '../utils/StoryContext';

interface StoryCardProps {
    storyId: string;
}

export default function StoryCard({ storyId }: StoryCardProps) {
    const { stories, deleteStory } = useStories();
    const story = stories.find((s) => s.id === storyId);

    const [address, setAddress] = useState('');
    const [isDeleting, setIsDeleting] = useState(false);

    useEffect(() => {
        const fetchAddress = async () => {
            if (!story) return;
            try {
                const res = await fetch(
                    `/api/geocode/reverse?lat=${story.latitude}&lon=${story.longitude}`
                );
                const data = await res.json();
                if (data.address) {
                    setAddress(data.address);
                }
            } catch (error) {
                console.error('Error fetching address:', error);
            }
        };

        fetchAddress();
    }, [story]);

    if (!story) return null;

    const handleDelete = async () => {
        if (isDeleting) return;

        const confirmed = window.confirm(
            'Apakah Anda yakin ingin menghapus cerita ini?'
        );
        if (!confirmed) return;

        setIsDeleting(true);
        const success = await deleteStory(story.id.toString());
        setIsDeleting(false);

        if (success) {
            console.log('Story deleted successfully');
        }
    };

    return (
        <div className="bg-[#1a1d29] rounded-2xl shadow-2xl overflow-hidden border border-white/10 backdrop-blur-sm transition-all transform hover:scale-[1.01] relative">
            {/* Gambar */}
            <div className="h-48 bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 flex items-center justify-center text-white text-sm font-medium">
                {story.imageUrl ? (
                    <Image
                        src={story.imageUrl}
                        alt={story.title || 'Story Image'}
                        width={400}
                        height={200}
                        className="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110 brightness-95 contrast-110"
                    />
                ) : (
                    <div className="flex items-center justify-center h-full text-white text-lg font-medium opacity-90">
                        Tidak ada gambar
                    </div>
                )}
            </div>

            {/* Konten */}
            <div className="p-6 space-y-4 text-white">
                {/* User Info */}
                <div className="flex items-center gap-3">
                    <div className="w-10 h-10 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-full flex items-center justify-center text-white text-lg font-semibold">
                        {story.user.username.charAt(0).toUpperCase()}
                    </div>
                    <p className="font-semibold text-purple-400">
                        {story.user.username}
                    </p>
                </div>

                {/* Meta Info */}
                <div className="bg-white/10 text-gray-300 p-4 rounded-lg text-sm space-y-2">
                    {/* Tanggal */}
                    <div className="flex items-center gap-2">
                        <svg className="w-4 h-4 text-indigo-400" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                            <path d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2z" />
                        </svg>
                        <span>{showFormattedDate(story.createdAt, 'id-ID')}</span>
                    </div>

                    {/* Lokasi */}
                    {address && (
                        <div className="flex items-center gap-2">
                            <svg className="w-4 h-4 text-indigo-400" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                                <path d="M12 2C8.134 2 5 5.134 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.866-3.134-7-7-7z" />
                            </svg>
                            <span>{address}</span>
                        </div>
                    )}
                </div>

                {/* Deskripsi */}
                <p className="text-sm text-gray-100">
                    <span className="text-white">•</span> {story.content || 'Tidak ada deskripsi'}
                </p>

                {/* Tombol Aksi */}
                <div className="flex justify-between items-center pt-2 border-t border-white/10">
                    <button className="px-5 py-2 mt-4 rounded-full text-white text-sm font-semibold bg-gradient-to-r from-indigo-500 to-purple-600 hover:from-purple-500 hover:to-pink-500 transition-all flex items-center gap-2">
                        Selengkapnya →
                    </button>

                    <button
                        onClick={handleDelete}
                        disabled={isDeleting}
                        className="w-10 h-10 rounded-full text-red-600 flex items-center justify-center relative overflow-hidden transition-all group"
                    >
                        <Trash2 className="relative z-10 text-lg group-hover:text-white group-hover:rotate-15 transition-all duration-300" />
                        <span className="absolute inset-0 bg-gradient-to-br from-red-200 to-red-300 rounded-full z-0 transition-all duration-300 group-hover:from-red-500 group-hover:to-red-600 "></span>
                        <span className="absolute inset-1 bg-white rounded-full z-0 transition-all duration-300 group-hover:scale-0"></span>
                    </button>
                </div>
            </div>
        </div>
    );
}


FOLDER HOOK
// src/hooks/useAuthRedirect.ts

"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { isLoggedIn } from "../app/lib/token"; 

export function useAuthRedirect() {
    const router = useRouter();
    const [isChecking, setIsChecking] = useState(true);

    useEffect(() => {
        // Berikan waktu untuk token tersimpan setelah login
        const checkAuth = () => {
            if (typeof window !== "undefined") {
                const loggedIn = isLoggedIn();
                
                if (!loggedIn) {
                    console.log("Not logged in, redirecting to login");
                    router.push("/login");
                } else {
                    console.log("User is logged in");
                }
                setIsChecking(false);
            }
        };

        // Delay sedikit untuk menghindari race condition
        const timeoutId = setTimeout(checkAuth, 200);
        
        return () => clearTimeout(timeoutId);
    }, [router]);

    return isChecking;
}

FOLDER LIB
// src/lib/validations/story.ts
import { z } from "zod";

export const createStorySchema = z.object({
    title: z
        .string()
        .min(1, "Judul wajib diisi")
        .max(100, "Judul maksimal 100 karakter"),
    content: z
        .string()
        .min(1, "Deskripsi wajib diisi")
        .max(1000, "Deskripsi maksimal 1000 karakter"),
    image: z
        .instanceof(File, { message: "File tidak valid" })
        .refine((file) => file.size <= 5 * 1024 * 1024, "Ukuran file maksimal 5MB")
        .refine(
            (file) =>
                ["image/jpeg", "image/jpg", "image/png", "image/webp"].includes(
                    file.type
                ),
            "Format file harus JPEG, PNG, atau WebP"
        ),
    latitude: z.number().min(-90).max(90).optional(),
    longitude: z.number().min(-180).max(180).optional(),
});

export type CreateStoryFormData = z.infer<typeof createStorySchema>;

export interface Story {
    id: number;
    title: string;
    content: string;
    imageUrl: string | null;
    latitude: number;
    longitude: number;
    createdAt: string;
    user: {
        id: number;
        username: string;
    };
}

export interface ApiResponse<T = unknown> {
    message: string;
    story?: T;
    error?: string;
}

FOLDER UTILS
// src/contexts/StoryContext.tsx
/* eslint-disable */
"use client";
import { createContext, useContext, useState, useEffect, ReactNode } from "react";
import { getToken, clearToken, isLoggedIn } from "../app/lib/token";
import { BASE_URL } from '../utils/config';


// Interfaces
export interface User {
    id: number;
    username: string;
    email?: string;
}

export interface Story {
    id: string;
    title?: string;
    content?: string;
    imageUrl?: string;
    createdAt: string | Date;
    latitude: number;
    longitude: number;
    user: {
        id: number;
        username: string;
    };
}

// Context Types
interface UserContextType {
    user: User | null;
    setUser: (user: User | null) => void;
    loading: boolean;
    error: string | null;
    fetchUserProfile: () => Promise<void>;
    logout: () => void;
}

interface StoryContextType {
    stories: Story[];
    setStories: (stories: Story[]) => void;
    addStory: (story: Story) => void;
    removeStory: (id: string) => void;
    fetchStories: () => Promise<void>;
    deleteStory: (id: string) => Promise<boolean>;
    loading: boolean;
    error: string | null;
}

// Create Contexts
const UserContext = createContext<UserContextType | undefined>(undefined);
const StoryContext = createContext<StoryContextType | undefined>(undefined);

// User Provider
export const UserProvider = ({ children }: { children: ReactNode }) => {
    const [user, setUser] = useState<User | null>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    // Fetch user profile from API
    const fetchUserProfile = async () => {
        if (!isLoggedIn()) {
            setLoading(false);
            return;
        }

        try {
            setLoading(true);
            setError(null);

            const token = getToken();
            const response = await fetch(`${BASE_URL}/api/stories`, {
                method: "GET",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json",
                },
            });

            if (!response.ok) {
                if (response.status === 401) {
                    clearToken();
                    setUser(null);
                    window.location.href = '/login';
                    return;
                }
                throw new Error("Failed to fetch user profile");
            }

            const data = await response.json();
            if (Array.isArray(data) && data.length > 0) {
                // Ambil data user dari story pertama
                const currentUser = data[0].user;
                setUser(currentUser);
            } else {
                setUser(null);
            }

        } catch (err) {
            console.error("Error fetching user profile:", err);
            setError(err instanceof Error ? err.message : "Failed to fetch user profile");
        } finally {
            setLoading(false);
        }
    };

    // Logout function
    const logout = () => {
        clearToken();
        setUser(null);
        window.location.href = '/login';
    };

    // Check authentication on mount
    useEffect(() => {
        if (isLoggedIn()) {
            fetchUserProfile();
        } else {
            setLoading(false);
        }
    }, []);

    const value = {
        user,
        setUser,
        loading,
        error,
        fetchUserProfile,
        logout,
    };

    return (
        <UserContext.Provider value={value}>
            {children}
        </UserContext.Provider>
    );
};

// Story Provider
export const StoryProvider = ({ children }: { children: ReactNode }) => {
    const [stories, setStories] = useState<Story[]>([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const fetchStories = async () => {
        try {
            setLoading(true);
            setError(null);

            const token = getToken();
            if (!token) {
                throw new Error("No authentication token");
            }

            const response = await fetch(`${BASE_URL}/api/stories`, {
                method: "GET",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json",
                },
            });

            if (!response.ok) {
                if (response.status === 401) {
                    clearToken();
                    window.location.href = '/login';
                    return;
                }
                throw new Error("Failed to fetch stories");
            }

            const data = await response.json();
            setStories(data.stories || data);
        } catch (err) {
            console.error("Error fetching stories:", err);
            setError(err instanceof Error ? err.message : "Failed to fetch stories");
        } finally {
            setLoading(false);
        }
    };

    // FUNGSI DELETE YANG DIPERBAIKI
    const deleteStory = async (id: string): Promise<boolean> => {
        try {
            setError(null);
            const token = getToken();

            if (!token) {
                throw new Error("No authentication token");
            }

            console.log(`Deleting story with ID: ${id}`);

            const response = await fetch(`${BASE_URL}/api/stories/${id}`, {
                method: "DELETE",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json",
                },
            });

            console.log(`Delete response status: ${response.status}`);

            if (!response.ok) {
                let errorMessage = `Failed to delete story (${response.status})`;

                if (response.status === 401) {
                    clearToken();
                    window.location.href = '/login';
                    return false;
                } else if (response.status === 404) {
                    errorMessage = "Story not found";
                } else if (response.status === 403) {
                    errorMessage = "You don't have permission to delete this story";
                } else {
                    try {
                        const errorData = await response.json();
                        errorMessage = errorData.error || errorData.message || errorMessage;
                    } catch {
                        errorMessage = response.statusText || errorMessage;
                    }
                }

                throw new Error(errorMessage);
            }

            // Jika sukses, hapus dari state lokal
            removeStory(id);
            console.log(`Story ${id} deleted successfully`);
            return true;

        } catch (err) {
            console.error("Error deleting story:", err);
            setError(err instanceof Error ? err.message : "Failed to delete story");
            return false;
        }
    };

    const addStory = (story: Story) => {
        setStories((prev) => [story, ...prev]);
    };

    const removeStory = (id: string) => {
        setStories((prev) => prev.filter((s) => s.id !== id));
    };

    useEffect(() => {
        if (isLoggedIn()) {
            fetchStories();
        }
    }, []);

    const value = {
        stories,
        setStories,
        addStory,
        removeStory,
        fetchStories,
        deleteStory,
        loading,
        error,
    };

    return (
        <StoryContext.Provider value={value}>
            {children}
        </StoryContext.Provider>
    );
};

export const AppProvider = ({ children }: { children: ReactNode }) => {
    return (
        <UserProvider>
            <StoryProvider>
                {children}
            </StoryProvider>
        </UserProvider>
    );
};

// Custom Hooks
export const useUser = (): UserContextType => {
    const context = useContext(UserContext);
    if (!context) {
        throw new Error("useUser must be used within a UserProvider");
    }
    return context;
};

export const useStories = (): StoryContextType => {
    const context = useContext(StoryContext);
    if (!context) {
        throw new Error("useStories must be used within a StoryProvider");
    }
    return context;
};

// Loading Component
export const LoadingWrapper = ({ children }: { children: ReactNode }) => {
    const { loading: userLoading } = useUser();
    const { loading: storyLoading } = useStories();

    if (userLoading) {
        return (
            <div className="flex justify-center items-center min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900">
                <div className="text-center">
                    <div className="w-16 h-16 border-4 border-white/20 border-t-white rounded-full animate-spin mx-auto mb-4"></div>
                    <p className="text-white text-lg">Loading...</p>
                </div>
            </div>
        );
    }

    return <>{children}</>;
};

// src/utils/index.ts

// Format tanggal
export function showFormattedDate(
    date: string | Date,
    locale = "en-US",
    options: Intl.DateTimeFormatOptions = {}
): string {
    return new Date(date).toLocaleDateString(locale, {
        year: "numeric",
        month: "long",
        day: "numeric",
        ...options,
    });
}

// Delay eksekusi
export function sleep(time = 1000): Promise<void> {
    return new Promise((resolve) => setTimeout(resolve, time));
}


export const BASE_URL = 'https://backend-dstory-production.up.railway.app';

{
  "name": "frontend-dstory",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hookform/resolvers": "^5.2.0",
    "@radix-ui/react-hover-card": "^1.1.14",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-slot": "^1.2.3",
    "axios": "^1.10.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "embla-carousel-autoplay": "^8.6.0",
    "embla-carousel-react": "^8.6.0",
    "form-data": "^4.0.4",
    "leaflet": "^1.9.4",
    "lucide-react": "^0.525.0",
    "next": "15.4.2",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "react-hook-form": "^7.61.1",
    "react-hot-toast": "^2.5.2",
    "react-leaflet": "^5.0.0",
    "tailwind-merge": "^3.3.1",
    "zod": "^4.0.10"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/aspect-ratio": "^0.4.2",
    "@tailwindcss/forms": "^0.5.10",
    "@tailwindcss/line-clamp": "^0.4.4",
    "@tailwindcss/postcss": "^4",
    "@tailwindcss/typography": "^0.5.16",
    "@types/leaflet": "^1.9.20",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.4.2",
    "tailwindcss": "^4",
    "tw-animate-css": "^1.3.5",
    "typescript": "^5"
  }
}
